// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'env.dart';

// **************************************************************************
// SecureDotEnvAnnotationGenerator
// **************************************************************************

class _$Env extends Env {
  const _$Env(this._encryptionKey, this._iv) : super._();

  final String _encryptionKey;
  final String _iv;
  static final Uint8List _encryptedValues = Uint8List.fromList([
    158,
    206,
    200,
    115,
    105,
    171,
    244,
    228,
    240,
    227,
    221,
    212,
    121,
    66,
    211,
    245,
    6,
    130,
    209,
    50,
    47,
    230,
    91,
    11,
    135,
    170,
    71,
    52,
    227,
    189,
    158,
    164,
    39,
    191,
    106,
    177,
    115,
    161,
    188,
    100,
    210,
    210,
    242,
    112,
    22,
    46,
    204,
    93,
    180,
    33,
    4,
    221,
    167,
    70,
    185,
    109,
    80,
    71,
    28,
    91,
    222,
    221,
    197,
    7,
    50,
    139,
    152,
    171,
    145,
    96,
    213,
    87,
    191,
    146,
    193,
    216,
    164,
    237,
    196,
    104,
    213,
    77,
    94,
    58,
    108,
    123,
    56,
    8,
    35,
    24,
    2,
    89,
    90,
    86,
    205,
    210,
    115,
    84,
    28,
    111,
    62,
    226,
    7,
    20,
    83,
    121,
    154,
    9,
    199,
    32,
    106,
    119,
    234,
    130,
    161,
    163,
    215,
    225,
    146,
    192,
    2,
    97,
    59,
    251,
    114,
    118,
    180,
    245,
    106,
    13,
    6,
    71,
    99,
    80,
    211,
    238,
    16,
    55,
    143,
    177,
    36,
    179,
    21,
    60,
    195,
    17,
    49,
    67,
    147,
    79,
    129,
    82,
    142,
    78,
    224,
    218,
    175,
    252,
    112,
    125,
    156,
    146,
    174,
    251,
    237,
    4,
    147,
    239,
    181,
    53,
    7,
    195,
    27,
    12,
    231,
    238,
    162,
    36,
    134,
    48,
    214,
    203,
    140,
    49,
    153,
    224,
    164,
    250,
    39,
    9,
    49,
    207,
    15,
    39,
    195,
    114,
    180,
    61,
    66,
    250,
    247,
    205,
    32,
    190,
    219,
    118,
    193,
    213,
    13,
    191,
    233,
    99,
    38,
    242,
    234,
    105,
    207,
    31,
    218,
    108,
    230,
    137,
    220,
    18,
    187,
    109,
    103,
    55,
    238,
    179,
    81,
    224,
    67,
    214,
    124,
    216,
    9,
    188,
    157,
    205,
    13,
    121,
    67,
    67,
    170,
    146,
    82,
    55,
    140,
    27,
    106,
    11,
    39,
    99,
    200,
    17,
    68,
    167,
    245,
    240,
    132,
    154,
    15,
    198,
    30,
    211,
    185,
    129,
    119,
    137,
    176,
    142,
    180,
    48,
    9,
    55,
    231,
    14,
    63,
    47,
    136,
    198,
    167,
    42,
    172,
    69,
    173,
    243,
    216,
    189,
    46,
    76,
    212,
    130,
    149,
    255,
    49,
    173,
    27,
    50,
    171,
    85,
    192,
    174,
    73,
    68,
    201,
    25,
    60,
    54,
    151,
    59,
    128,
    27,
    216,
    245,
    67,
    32,
    131,
    171,
    179,
    26,
    188,
    235,
    80,
    155,
    197,
    6,
    149,
    105,
    199,
    192,
    8,
    53,
    41,
    229,
    40,
    194,
    197,
    139,
    63,
    114,
    144,
    250,
    33,
    244,
    227,
    209,
    124,
    110,
    66,
    2,
    255,
    11,
    119,
    108,
    39,
    27,
    152,
    68,
    133,
    11,
    220,
    163,
    165,
    193,
    132,
    89,
    225,
    39,
    35,
    181,
    11,
    125,
    198,
    236,
    154,
    225,
    46,
    56,
    186,
    225,
    10,
    115,
    25,
    201,
    41,
    39,
    124,
    185,
    66,
    18,
    179,
    169,
    222,
    146,
    155,
    227,
    139,
    194,
    10,
    190,
    251,
    253,
    135,
    76,
    88,
    62,
    14,
    74,
    158,
    48,
    120,
    211,
    176,
    2,
    51,
    70,
    224,
    140,
    39,
    241,
    245,
    102,
    21,
    186,
    113,
    242,
    254,
    187,
    62,
    233
  ]);
  @override
  String get supabaseUrl => _get('SUPABASE_URL');

  @override
  String get supabaseKey => _get('SUPABASE_KEY');

  @override
  String get azureKey => _get('AZURE_KEY');

  @override
  String get azureRegion => _get('AZURE_REGION');

  T _get<T>(
    String key, {
    T Function(String)? fromString,
  }) {
    T _parseValue(String strValue) {
      if (T == String) {
        return (strValue) as T;
      } else if (T == int) {
        return int.parse(strValue) as T;
      } else if (T == double) {
        return double.parse(strValue) as T;
      } else if (T == bool) {
        return (strValue.toLowerCase() == 'true') as T;
      } else if (T == Enum || fromString != null) {
        if (fromString == null) {
          throw Exception('fromString is required for Enum');
        }

        return fromString(strValue.split('.').last);
      }

      throw Exception('Type ${T.toString()} not supported');
    }

    final encryptionKey = base64.decode(_encryptionKey.trim());
    final iv = base64.decode(_iv.trim());
    final decrypted =
        AESCBCEncryper.aesCbcDecrypt(encryptionKey, iv, _encryptedValues);
    final jsonMap = json.decode(decrypted) as Map<String, dynamic>;
    if (!jsonMap.containsKey(key)) {
      throw Exception('Key $key not found in .env file');
    }

    final encryptedValue = jsonMap[key] as String;
    final decryptedValue = AESCBCEncryper.aesCbcDecrypt(
      encryptionKey,
      iv,
      base64.decode(encryptedValue),
    );
    return _parseValue(decryptedValue);
  }
}
