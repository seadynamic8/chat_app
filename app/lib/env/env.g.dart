// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'env.dart';

// **************************************************************************
// SecureDotEnvAnnotationGenerator
// **************************************************************************

class _$Env extends Env {
  const _$Env(this._encryptionKey, this._iv) : super._();

  final String _encryptionKey;
  final String _iv;
  static final Uint8List _encryptedValues = Uint8List.fromList([
    255,
    202,
    166,
    177,
    107,
    143,
    232,
    22,
    208,
    106,
    157,
    243,
    70,
    187,
    196,
    7,
    22,
    55,
    93,
    133,
    180,
    77,
    95,
    21,
    151,
    219,
    196,
    132,
    112,
    221,
    91,
    132,
    240,
    121,
    52,
    9,
    53,
    75,
    232,
    28,
    24,
    88,
    92,
    111,
    201,
    243,
    216,
    96,
    52,
    42,
    62,
    56,
    196,
    162,
    218,
    66,
    26,
    58,
    219,
    200,
    196,
    237,
    238,
    4,
    10,
    215,
    174,
    55,
    57,
    35,
    220,
    248,
    126,
    99,
    63,
    144,
    25,
    0,
    116,
    38,
    63,
    249,
    247,
    138,
    206,
    36,
    99,
    227,
    96,
    243,
    166,
    174,
    234,
    38,
    67,
    41,
    74,
    63,
    3,
    129,
    174,
    176,
    120,
    29,
    124,
    49,
    4,
    175,
    203,
    253,
    147,
    41,
    241,
    66,
    25,
    239,
    61,
    215,
    19,
    119,
    99,
    221,
    198,
    139,
    230,
    174,
    238,
    48,
    95,
    93,
    4,
    77,
    175,
    26,
    44,
    88,
    35,
    140,
    21,
    147,
    18,
    184,
    172,
    37,
    95,
    45,
    29,
    167,
    26,
    120,
    220,
    116,
    43,
    105,
    181,
    211,
    222,
    185,
    152,
    81,
    85,
    56,
    237,
    51,
    32,
    18,
    69,
    80,
    3,
    205,
    252,
    149,
    3,
    198,
    134,
    135,
    2,
    58,
    51,
    115,
    121,
    243,
    250,
    173,
    126,
    220,
    134,
    44,
    171,
    45,
    238,
    160,
    4,
    28,
    109,
    36,
    166,
    22,
    152,
    191,
    166,
    109,
    165,
    202,
    200,
    6,
    59,
    151,
    143,
    60,
    229,
    28,
    233,
    221,
    20,
    108,
    53,
    232,
    136,
    125,
    50,
    19,
    156,
    84,
    133,
    13,
    153,
    124,
    195,
    149,
    166,
    216,
    217,
    177,
    164,
    194,
    142,
    16,
    0,
    148,
    136,
    66,
    157,
    139,
    123,
    43,
    157,
    82,
    237,
    143,
    225,
    96,
    133,
    66,
    159,
    41,
    142,
    54,
    237,
    169,
    221,
    250,
    200,
    138,
    217,
    32,
    249,
    11,
    100,
    190,
    41,
    10,
    45,
    164,
    232,
    201,
    47,
    0,
    39,
    150,
    90,
    63,
    131,
    193,
    239,
    181,
    9,
    130,
    209,
    95,
    33,
    117,
    197,
    128,
    6,
    248,
    86,
    166,
    217,
    99,
    118,
    51,
    87,
    129,
    172,
    120,
    167,
    21,
    113,
    219,
    95,
    170,
    49,
    164,
    198,
    211,
    128,
    230,
    199,
    236,
    14,
    140,
    57,
    7,
    205,
    82,
    102,
    229,
    222,
    96,
    176,
    96,
    211,
    101,
    36,
    127,
    175,
    103,
    149,
    184,
    37,
    132,
    3,
    125,
    241,
    143,
    30,
    150,
    215,
    216,
    156,
    95,
    157,
    65,
    223,
    144,
    91,
    75,
    49,
    129,
    122,
    113,
    221,
    195,
    207,
    170,
    140,
    124,
    208,
    113,
    167,
    31,
    111,
    72,
    236,
    116,
    221,
    90,
    140,
    65,
    98,
    231,
    23,
    6,
    0,
    202,
    77,
    40,
    164,
    13,
    136,
    97,
    244,
    206,
    25,
    183,
    241,
    51,
    132,
    248,
    21,
    101,
    177,
    223,
    116,
    118,
    248,
    54,
    230,
    107,
    197,
    242,
    47,
    227,
    214,
    224,
    230,
    115,
    72,
    163,
    121,
    186,
    107,
    139,
    95,
    157,
    146,
    51,
    170,
    220,
    145,
    36
  ]);
  @override
  String get supabaseUrl => _get('SUPABASE_URL');

  @override
  String get supabaseKey => _get('SUPABASE_KEY');

  @override
  String get azureKey => _get('AZURE_KEY');

  @override
  String get azureRegion => _get('AZURE_REGION');

  T _get<T>(
    String key, {
    T Function(String)? fromString,
  }) {
    T _parseValue(String strValue) {
      if (T == String) {
        return (strValue) as T;
      } else if (T == int) {
        return int.parse(strValue) as T;
      } else if (T == double) {
        return double.parse(strValue) as T;
      } else if (T == bool) {
        return (strValue.toLowerCase() == 'true') as T;
      } else if (T == Enum || fromString != null) {
        if (fromString == null) {
          throw Exception('fromString is required for Enum');
        }

        return fromString(strValue.split('.').last);
      }

      throw Exception('Type ${T.toString()} not supported');
    }

    final encryptionKey = base64.decode(_encryptionKey.trim());
    final iv = base64.decode(_iv.trim());
    final decrypted =
        AESCBCEncryper.aesCbcDecrypt(encryptionKey, iv, _encryptedValues);
    final jsonMap = json.decode(decrypted) as Map<String, dynamic>;
    if (!jsonMap.containsKey(key)) {
      throw Exception('Key $key not found in .env file');
    }

    final encryptedValue = jsonMap[key] as String;
    final decryptedValue = AESCBCEncryper.aesCbcDecrypt(
      encryptionKey,
      iv,
      base64.decode(encryptedValue),
    );
    return _parseValue(decryptedValue);
  }
}
