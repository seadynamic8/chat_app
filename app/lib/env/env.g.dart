// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'env.dart';

// **************************************************************************
// SecureDotEnvAnnotationGenerator
// **************************************************************************

class _$Env extends Env {
  const _$Env(this._encryptionKey, this._iv) : super._();

  final String _encryptionKey;
  final String _iv;
  static final Uint8List _encryptedValues = Uint8List.fromList([
    214,
    210,
    4,
    238,
    20,
    13,
    80,
    214,
    145,
    174,
    59,
    174,
    168,
    22,
    13,
    71,
    242,
    170,
    225,
    170,
    4,
    125,
    211,
    179,
    157,
    47,
    91,
    205,
    23,
    79,
    2,
    96,
    196,
    234,
    121,
    197,
    100,
    161,
    76,
    81,
    208,
    20,
    7,
    232,
    54,
    66,
    96,
    129,
    131,
    5,
    141,
    146,
    106,
    219,
    167,
    120,
    110,
    236,
    94,
    105,
    106,
    216,
    48,
    138,
    90,
    121,
    72,
    164,
    244,
    75,
    215,
    94,
    0,
    213,
    67,
    168,
    225,
    87,
    177,
    204,
    163,
    185,
    92,
    105,
    29,
    222,
    196,
    69,
    174,
    54,
    198,
    90,
    174,
    178,
    19,
    56,
    38,
    33,
    130,
    251,
    74,
    138,
    156,
    77,
    163,
    185,
    85,
    122,
    104,
    240,
    172,
    73,
    222,
    15,
    241,
    103,
    188,
    64,
    138,
    102,
    1,
    107,
    17,
    155,
    185,
    251,
    69,
    64,
    36,
    99,
    140,
    54,
    8,
    229,
    57,
    21,
    51,
    151,
    173,
    93,
    190,
    204,
    202,
    83,
    62,
    234,
    158,
    118,
    191,
    71,
    28,
    203,
    132,
    181,
    88,
    99,
    209,
    68,
    208,
    19,
    191,
    193,
    108,
    22,
    94,
    253,
    179,
    117,
    120,
    168,
    50,
    23,
    169,
    210,
    222,
    88,
    72,
    255,
    24,
    95,
    52,
    53,
    115,
    103,
    206,
    42,
    38,
    166,
    230,
    60,
    79,
    217,
    27,
    175,
    221,
    62,
    173,
    34,
    105,
    14,
    37,
    142,
    51,
    69,
    129,
    156,
    108,
    211,
    97,
    70,
    20,
    189,
    182,
    89,
    221,
    71,
    117,
    129,
    174,
    202,
    167,
    253,
    193,
    123,
    110,
    225,
    83,
    8,
    99,
    22,
    125,
    187,
    115,
    214,
    110,
    117,
    242,
    129,
    33,
    66,
    13,
    111,
    158,
    170,
    57,
    23,
    80,
    181,
    115,
    91,
    92,
    121,
    132,
    188,
    251,
    168,
    246,
    223,
    19,
    213,
    40,
    79,
    117,
    85,
    57,
    17,
    12,
    226,
    175,
    201,
    121,
    62,
    249,
    52,
    238,
    231,
    172,
    14,
    226,
    2,
    156,
    4,
    92,
    20,
    144,
    112,
    152,
    246,
    105,
    50,
    136,
    159,
    30,
    253,
    213,
    26,
    238,
    178,
    233,
    90,
    43,
    225,
    142,
    130,
    16,
    1,
    189,
    230,
    154,
    13,
    163,
    27,
    153,
    41,
    243,
    58,
    27,
    0,
    95,
    96,
    2,
    27,
    63,
    233,
    240,
    52,
    219,
    217,
    136,
    193,
    132,
    205,
    199,
    121,
    92,
    219,
    31,
    243,
    231,
    182,
    27,
    138,
    159,
    168,
    83,
    198,
    20,
    13,
    135,
    93,
    186,
    196,
    192,
    87,
    83,
    237,
    77,
    137,
    165,
    141,
    106,
    171,
    100,
    211,
    199,
    165,
    43,
    38,
    91,
    187,
    111,
    111,
    193,
    146,
    216,
    244,
    188,
    59,
    210,
    209,
    19,
    125,
    110,
    155,
    240,
    223,
    106,
    81,
    36,
    69,
    6,
    202,
    28,
    251,
    227,
    83,
    247,
    175,
    215,
    12,
    45,
    3,
    197,
    105,
    8,
    79,
    62,
    190,
    25,
    21,
    74,
    106,
    32,
    118,
    132,
    31,
    40,
    5,
    236,
    24,
    94,
    7,
    82,
    200,
    166,
    24,
    58,
    106,
    224,
    57,
    62,
    10
  ]);
  @override
  String get supabaseUrl => _get('SUPABASE_URL');

  @override
  String get supabaseKey => _get('SUPABASE_KEY');

  @override
  String get azureKey => _get('AZURE_KEY');

  @override
  String get azureRegion => _get('AZURE_REGION');

  T _get<T>(
    String key, {
    T Function(String)? fromString,
  }) {
    T _parseValue(String strValue) {
      if (T == String) {
        return (strValue) as T;
      } else if (T == int) {
        return int.parse(strValue) as T;
      } else if (T == double) {
        return double.parse(strValue) as T;
      } else if (T == bool) {
        return (strValue.toLowerCase() == 'true') as T;
      } else if (T == Enum || fromString != null) {
        if (fromString == null) {
          throw Exception('fromString is required for Enum');
        }

        return fromString(strValue.split('.').last);
      }

      throw Exception('Type ${T.toString()} not supported');
    }

    final encryptionKey = base64.decode(_encryptionKey.trim());
    final iv = base64.decode(_iv.trim());
    final decrypted =
        AESCBCEncryper.aesCbcDecrypt(encryptionKey, iv, _encryptedValues);
    final jsonMap = json.decode(decrypted) as Map<String, dynamic>;
    if (!jsonMap.containsKey(key)) {
      throw Exception('Key $key not found in .env file');
    }

    final encryptedValue = jsonMap[key] as String;
    final decryptedValue = AESCBCEncryper.aesCbcDecrypt(
      encryptionKey,
      iv,
      base64.decode(encryptedValue),
    );
    return _parseValue(decryptedValue);
  }
}
