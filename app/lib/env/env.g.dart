// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'env.dart';

// **************************************************************************
// SecureDotEnvAnnotationGenerator
// **************************************************************************

class _$Env extends Env {
  const _$Env(this._encryptionKey, this._iv) : super._();

  final String _encryptionKey;
  final String _iv;
  static final Uint8List _encryptedValues = Uint8List.fromList([
    107,
    152,
    171,
    158,
    192,
    40,
    125,
    123,
    52,
    208,
    161,
    224,
    115,
    41,
    0,
    81,
    93,
    96,
    177,
    46,
    57,
    108,
    43,
    52,
    191,
    102,
    45,
    196,
    0,
    253,
    157,
    31,
    15,
    173,
    22,
    23,
    92,
    86,
    47,
    27,
    193,
    81,
    172,
    207,
    30,
    245,
    82,
    129,
    5,
    239,
    69,
    210,
    241,
    37,
    93,
    122,
    43,
    72,
    21,
    48,
    213,
    175,
    103,
    31,
    255,
    7,
    108,
    247,
    90,
    161,
    144,
    73,
    188,
    181,
    58,
    219,
    52,
    197,
    99,
    127,
    85,
    166,
    53,
    65,
    194,
    68,
    128,
    197,
    167,
    87,
    2,
    179,
    233,
    62,
    155,
    98,
    194,
    249,
    107,
    214,
    92,
    230,
    39,
    207,
    97,
    159,
    77,
    47,
    242,
    224,
    56,
    12,
    243,
    14,
    238,
    166,
    207,
    120,
    108,
    218,
    108,
    215,
    42,
    96,
    157,
    101,
    17,
    87,
    237,
    126,
    131,
    252,
    255,
    52,
    190,
    151,
    43,
    254,
    28,
    136,
    173,
    249,
    54,
    73,
    186,
    124,
    197,
    177,
    48,
    218,
    155,
    248,
    46,
    174,
    119,
    80,
    187,
    156,
    65,
    204,
    77,
    211,
    112,
    97,
    128,
    39,
    141,
    206,
    56,
    96,
    122,
    159,
    3,
    250,
    182,
    158,
    158,
    44,
    225,
    255,
    209,
    123,
    200,
    80,
    116,
    1,
    147,
    8,
    213,
    191,
    110,
    198,
    212,
    198,
    47,
    238,
    225,
    88,
    205,
    101,
    16,
    36,
    184,
    113,
    189,
    80,
    175,
    169,
    182,
    205,
    233,
    27,
    145,
    252,
    81,
    44,
    8,
    100,
    163,
    38,
    102,
    73,
    93,
    230,
    240,
    25,
    160,
    101,
    4,
    149,
    200,
    2,
    28,
    183,
    60,
    79,
    234,
    47,
    23,
    37,
    202,
    93,
    223,
    67,
    253,
    136,
    31,
    231,
    151,
    42,
    106,
    53,
    12,
    114,
    119,
    55,
    221,
    20,
    132,
    99,
    63,
    17,
    114,
    153,
    17,
    209,
    84,
    88,
    156,
    97,
    64,
    249,
    37,
    168,
    193,
    190,
    234,
    39,
    34,
    57,
    92,
    241,
    70,
    24,
    12,
    133,
    93,
    218,
    76,
    66,
    29,
    185,
    26,
    28,
    213,
    28,
    1,
    227,
    217,
    17,
    253,
    8,
    215,
    13,
    187,
    145,
    174,
    224,
    225,
    207,
    208,
    21,
    92,
    120,
    197,
    134,
    218,
    52,
    93,
    178,
    97,
    10,
    163,
    69,
    127,
    46,
    20,
    9,
    0,
    182,
    143,
    17,
    158,
    18,
    15,
    50,
    156,
    239,
    43,
    190,
    101,
    84,
    96,
    66,
    111,
    82,
    215,
    61,
    153,
    255,
    56,
    136,
    11,
    106,
    253,
    47,
    132,
    254,
    79,
    100,
    178,
    100,
    160,
    154,
    132,
    206,
    100,
    157,
    44,
    244,
    46,
    13,
    156,
    7,
    34,
    217,
    146,
    60,
    24,
    65,
    229,
    45,
    10,
    70,
    62,
    249,
    95,
    229,
    12,
    109,
    140,
    223,
    100,
    39,
    13,
    232,
    69,
    250,
    228,
    44,
    255,
    144,
    31,
    35,
    237,
    59,
    234,
    111,
    68,
    22,
    40,
    164,
    225,
    231,
    232,
    140,
    1,
    27,
    68,
    129,
    196,
    222,
    218,
    247,
    2,
    93,
    6,
    201,
    70,
    42,
    148,
    69
  ]);
  @override
  String get supabaseUrl => _get('SUPABASE_URL');

  @override
  String get supabaseKey => _get('SUPABASE_KEY');

  @override
  String get azureKey => _get('AZURE_KEY');

  @override
  String get azureRegion => _get('AZURE_REGION');

  T _get<T>(
    String key, {
    T Function(String)? fromString,
  }) {
    T _parseValue(String strValue) {
      if (T == String) {
        return (strValue) as T;
      } else if (T == int) {
        return int.parse(strValue) as T;
      } else if (T == double) {
        return double.parse(strValue) as T;
      } else if (T == bool) {
        return (strValue.toLowerCase() == 'true') as T;
      } else if (T == Enum || fromString != null) {
        if (fromString == null) {
          throw Exception('fromString is required for Enum');
        }

        return fromString(strValue.split('.').last);
      }

      throw Exception('Type ${T.toString()} not supported');
    }

    final encryptionKey = base64.decode(_encryptionKey.trim());
    final iv = base64.decode(_iv.trim());
    final decrypted =
        AESCBCEncryper.aesCbcDecrypt(encryptionKey, iv, _encryptedValues);
    final jsonMap = json.decode(decrypted) as Map<String, dynamic>;
    if (!jsonMap.containsKey(key)) {
      throw Exception('Key $key not found in .env file');
    }

    final encryptedValue = jsonMap[key] as String;
    final decryptedValue = AESCBCEncryper.aesCbcDecrypt(
      encryptionKey,
      iv,
      base64.decode(encryptedValue),
    );
    return _parseValue(decryptedValue);
  }
}
