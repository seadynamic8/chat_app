// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'env.dart';

// **************************************************************************
// SecureDotEnvAnnotationGenerator
// **************************************************************************

class _$Env extends Env {
  const _$Env(this._encryptionKey, this._iv) : super._();

  final String _encryptionKey;
  final String _iv;
  static final Uint8List _encryptedValues = Uint8List.fromList([
    202,
    206,
    162,
    66,
    236,
    57,
    242,
    240,
    29,
    165,
    237,
    1,
    154,
    52,
    252,
    115,
    75,
    207,
    59,
    74,
    224,
    100,
    10,
    168,
    159,
    230,
    241,
    91,
    24,
    194,
    133,
    69,
    123,
    212,
    54,
    127,
    230,
    75,
    114,
    208,
    159,
    176,
    12,
    193,
    2,
    88,
    227,
    146,
    132,
    36,
    20,
    206,
    170,
    91,
    78,
    179,
    18,
    202,
    59,
    234,
    98,
    107,
    209,
    13,
    49,
    104,
    115,
    183,
    103,
    159,
    53,
    114,
    46,
    184,
    7,
    21,
    234,
    69,
    120,
    96,
    13,
    116,
    76,
    67,
    7,
    130,
    199,
    68,
    46,
    242,
    179,
    68,
    217,
    64,
    239,
    100,
    18,
    124,
    218,
    100,
    111,
    117,
    12,
    62,
    28,
    253,
    151,
    222,
    125,
    98,
    101,
    97,
    252,
    71,
    116,
    10,
    137,
    252,
    13,
    37,
    44,
    243,
    209,
    22,
    128,
    201,
    106,
    241,
    83,
    9,
    207,
    47,
    90,
    69,
    20,
    87,
    213,
    189,
    142,
    3,
    203,
    105,
    150,
    95,
    237,
    51,
    86,
    59,
    227,
    182,
    98,
    135,
    89,
    53,
    196,
    131,
    64,
    189,
    145,
    194,
    227,
    139,
    120,
    217,
    132,
    14,
    124,
    40,
    13,
    35,
    190,
    76,
    211,
    29,
    86,
    208,
    194,
    21,
    153,
    95,
    133,
    132,
    110,
    41,
    97,
    170,
    141,
    209,
    219,
    96,
    94,
    22,
    43,
    132,
    235,
    100,
    36,
    235,
    233,
    192,
    26,
    28,
    121,
    248,
    168,
    211,
    36,
    213,
    121,
    133,
    213,
    56,
    108,
    242,
    109,
    137,
    233,
    191,
    94,
    7,
    220,
    235,
    242,
    198,
    104,
    74,
    18,
    159,
    26,
    65,
    254,
    0,
    253,
    92,
    137,
    10,
    139,
    14,
    16,
    22,
    33,
    105,
    166,
    123,
    119,
    188,
    145,
    101,
    107,
    243,
    202,
    64,
    166,
    211,
    236,
    207,
    113,
    249,
    216,
    233,
    240,
    248,
    227,
    52,
    127,
    127,
    187,
    205,
    165,
    100,
    243,
    208,
    30,
    208,
    163,
    124,
    137,
    135,
    32,
    51,
    81,
    21,
    79,
    173,
    151,
    250,
    193,
    159,
    6,
    135,
    36,
    27,
    54,
    143,
    168,
    53,
    22,
    135,
    221,
    255,
    108,
    201,
    148,
    109,
    23,
    125,
    191,
    17,
    209,
    75,
    238,
    194,
    142,
    17,
    106,
    169,
    158,
    34,
    240,
    9,
    19,
    100,
    250,
    103,
    179,
    96,
    166,
    208,
    16,
    131,
    155,
    107,
    25,
    61,
    9,
    117,
    239,
    155,
    166,
    37,
    236,
    145,
    31,
    42,
    169,
    20,
    127,
    202,
    20,
    214,
    178,
    208,
    174,
    214,
    142,
    122,
    220,
    254,
    204,
    192,
    57,
    195,
    176,
    3,
    223,
    19,
    133,
    103,
    14,
    70,
    43,
    33,
    183,
    10,
    49,
    49,
    220,
    103,
    206,
    248,
    18,
    199,
    111,
    169,
    137,
    76,
    101,
    210,
    23,
    251,
    197,
    98,
    160,
    38,
    148,
    144,
    196,
    4,
    153,
    21,
    219,
    69,
    102,
    182,
    82,
    128,
    67,
    137,
    252,
    207,
    244,
    64,
    31,
    190,
    138,
    166,
    30,
    199,
    7,
    143,
    172,
    232,
    177,
    231,
    156,
    20,
    170,
    139,
    190,
    120,
    98,
    89
  ]);
  @override
  String get supabaseUrl => _get('SUPABASE_URL');

  @override
  String get supabaseKey => _get('SUPABASE_KEY');

  @override
  String get azureKey => _get('AZURE_KEY');

  @override
  String get azureRegion => _get('AZURE_REGION');

  T _get<T>(
    String key, {
    T Function(String)? fromString,
  }) {
    T _parseValue(String strValue) {
      if (T == String) {
        return (strValue) as T;
      } else if (T == int) {
        return int.parse(strValue) as T;
      } else if (T == double) {
        return double.parse(strValue) as T;
      } else if (T == bool) {
        return (strValue.toLowerCase() == 'true') as T;
      } else if (T == Enum || fromString != null) {
        if (fromString == null) {
          throw Exception('fromString is required for Enum');
        }

        return fromString(strValue.split('.').last);
      }

      throw Exception('Type ${T.toString()} not supported');
    }

    final encryptionKey = base64.decode(_encryptionKey.trim());
    final iv = base64.decode(_iv.trim());
    final decrypted =
        AESCBCEncryper.aesCbcDecrypt(encryptionKey, iv, _encryptedValues);
    final jsonMap = json.decode(decrypted) as Map<String, dynamic>;
    if (!jsonMap.containsKey(key)) {
      throw Exception('Key $key not found in .env file');
    }

    final encryptedValue = jsonMap[key] as String;
    final decryptedValue = AESCBCEncryper.aesCbcDecrypt(
      encryptionKey,
      iv,
      base64.decode(encryptedValue),
    );
    return _parseValue(decryptedValue);
  }
}
