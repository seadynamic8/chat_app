// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'env.dart';

// **************************************************************************
// SecureDotEnvAnnotationGenerator
// **************************************************************************

class _$Env extends Env {
  const _$Env(this._encryptionKey, this._iv) : super._();

  final String _encryptionKey;
  final String _iv;
  static final Uint8List _encryptedValues = Uint8List.fromList([
    125,
    59,
    142,
    245,
    231,
    78,
    117,
    18,
    231,
    96,
    194,
    66,
    23,
    211,
    1,
    47,
    166,
    151,
    124,
    147,
    0,
    37,
    250,
    33,
    47,
    46,
    114,
    57,
    158,
    247,
    125,
    196,
    239,
    60,
    77,
    115,
    190,
    33,
    209,
    36,
    70,
    126,
    63,
    40,
    111,
    176,
    54,
    6,
    90,
    176,
    159,
    33,
    69,
    195,
    15,
    176,
    157,
    108,
    137,
    94,
    27,
    178,
    24,
    218,
    185,
    232,
    0,
    218,
    101,
    126,
    23,
    55,
    0,
    80,
    112,
    74,
    70,
    173,
    250,
    214,
    122,
    132,
    3,
    212,
    243,
    245,
    61,
    241,
    239,
    26,
    13,
    218,
    67,
    54,
    159,
    218,
    45,
    90,
    100,
    38,
    56,
    177,
    80,
    219,
    177,
    84,
    109,
    43,
    205,
    255,
    5,
    83,
    124,
    129,
    153,
    241,
    234,
    116,
    183,
    139,
    86,
    96,
    94,
    42,
    239,
    28,
    157,
    35,
    155,
    104,
    252,
    148,
    179,
    163,
    198,
    162,
    20,
    148,
    23,
    230,
    172,
    27,
    173,
    242,
    13,
    82,
    193,
    86,
    91,
    147,
    2,
    193,
    196,
    189,
    227,
    171,
    158,
    250,
    113,
    199,
    181,
    46,
    0,
    17,
    23,
    15,
    60,
    12,
    42,
    66,
    11,
    49,
    206,
    58,
    228,
    236,
    9,
    163,
    199,
    129,
    39,
    195,
    221,
    14,
    217,
    47,
    163,
    141,
    177,
    65,
    120,
    232,
    107,
    221,
    67,
    23,
    164,
    56,
    209,
    58,
    219,
    74,
    192,
    246,
    120,
    80,
    57,
    233,
    126,
    83,
    100,
    56,
    83,
    56,
    95,
    228,
    208,
    179,
    108,
    168,
    85,
    41,
    200,
    126,
    45,
    217,
    5,
    250,
    185,
    28,
    110,
    30,
    247,
    255,
    86,
    83,
    187,
    90,
    153,
    179,
    239,
    1,
    142,
    19,
    177,
    26,
    101,
    206,
    115,
    20,
    228,
    3,
    115,
    145,
    157,
    165,
    4,
    152,
    38,
    142,
    171,
    128,
    80,
    64,
    20,
    228,
    181,
    215,
    30,
    237,
    158,
    161,
    230,
    219,
    224,
    166,
    251,
    15,
    130,
    77,
    60,
    146,
    21,
    121,
    78,
    14,
    76,
    3,
    50,
    108,
    217,
    137,
    215,
    111,
    255,
    37,
    9,
    110,
    77,
    224,
    90,
    133,
    178,
    52,
    136,
    118,
    60,
    43,
    28,
    178,
    20,
    28,
    81,
    114,
    239,
    106,
    25,
    6,
    180,
    190,
    110,
    141,
    245,
    38,
    234,
    133,
    125,
    219,
    91,
    132,
    49,
    46,
    29,
    45,
    55,
    138,
    149,
    18,
    238,
    157,
    148,
    232,
    220,
    125,
    85,
    215,
    220,
    66,
    121,
    85,
    160,
    204,
    35,
    70,
    122,
    227,
    103,
    72,
    66,
    102,
    74,
    214,
    121,
    102,
    64,
    37,
    114,
    132,
    187,
    167,
    25,
    121,
    225,
    244,
    100,
    109,
    164,
    69,
    116,
    185,
    11,
    132,
    103,
    249,
    188,
    61,
    91,
    211,
    170,
    20,
    215,
    58,
    26,
    178,
    167,
    92,
    173,
    171,
    188,
    45,
    83,
    12,
    132,
    69,
    89,
    202,
    235,
    127,
    77,
    69,
    10,
    48,
    22,
    4,
    52,
    103,
    85,
    92,
    135,
    119,
    244,
    149,
    11,
    245,
    43,
    62,
    174,
    46,
    94,
    13,
    162,
    207
  ]);
  @override
  String get supabaseUrl => _get('SUPABASE_URL');

  @override
  String get supabaseKey => _get('SUPABASE_KEY');

  @override
  String get azureKey => _get('AZURE_KEY');

  @override
  String get azureRegion => _get('AZURE_REGION');

  T _get<T>(
    String key, {
    T Function(String)? fromString,
  }) {
    T _parseValue(String strValue) {
      if (T == String) {
        return (strValue) as T;
      } else if (T == int) {
        return int.parse(strValue) as T;
      } else if (T == double) {
        return double.parse(strValue) as T;
      } else if (T == bool) {
        return (strValue.toLowerCase() == 'true') as T;
      } else if (T == Enum || fromString != null) {
        if (fromString == null) {
          throw Exception('fromString is required for Enum');
        }

        return fromString(strValue.split('.').last);
      }

      throw Exception('Type ${T.toString()} not supported');
    }

    final encryptionKey = base64.decode(_encryptionKey.trim());
    final iv = base64.decode(_iv.trim());
    final decrypted =
        AESCBCEncryper.aesCbcDecrypt(encryptionKey, iv, _encryptedValues);
    final jsonMap = json.decode(decrypted) as Map<String, dynamic>;
    if (!jsonMap.containsKey(key)) {
      throw Exception('Key $key not found in .env file');
    }

    final encryptedValue = jsonMap[key] as String;
    final decryptedValue = AESCBCEncryper.aesCbcDecrypt(
      encryptionKey,
      iv,
      base64.decode(encryptedValue),
    );
    return _parseValue(decryptedValue);
  }
}
