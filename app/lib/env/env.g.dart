// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'env.dart';

// **************************************************************************
// SecureDotEnvAnnotationGenerator
// **************************************************************************

class _$Env extends Env {
  const _$Env(this._encryptionKey, this._iv) : super._();

  final String _encryptionKey;
  final String _iv;
  static final Uint8List _encryptedValues = Uint8List.fromList([
    87,
    130,
    104,
    245,
    75,
    134,
    80,
    255,
    207,
    56,
    112,
    101,
    253,
    91,
    177,
    78,
    252,
    226,
    10,
    195,
    58,
    219,
    251,
    172,
    172,
    9,
    222,
    93,
    63,
    130,
    124,
    133,
    49,
    8,
    184,
    13,
    129,
    190,
    38,
    238,
    5,
    159,
    133,
    179,
    95,
    73,
    40,
    249,
    22,
    215,
    125,
    31,
    82,
    226,
    72,
    146,
    110,
    3,
    53,
    98,
    230,
    101,
    35,
    219,
    255,
    81,
    69,
    136,
    22,
    139,
    164,
    217,
    214,
    59,
    157,
    227,
    206,
    49,
    144,
    132,
    73,
    168,
    55,
    107,
    235,
    37,
    17,
    126,
    19,
    179,
    151,
    205,
    225,
    169,
    240,
    15,
    54,
    59,
    3,
    99,
    30,
    124,
    172,
    43,
    84,
    86,
    155,
    150,
    54,
    186,
    199,
    13,
    254,
    50,
    106,
    203,
    236,
    153,
    147,
    193,
    197,
    65,
    157,
    27,
    42,
    226,
    12,
    238,
    234,
    197,
    142,
    221,
    19,
    132,
    123,
    103,
    251,
    9,
    87,
    7,
    93,
    8,
    83,
    22,
    21,
    249,
    174,
    149,
    46,
    236,
    167,
    109,
    151,
    213,
    95,
    5,
    30,
    196,
    13,
    70,
    252,
    34,
    231,
    103,
    223,
    253,
    190,
    78,
    111,
    33,
    196,
    187,
    227,
    121,
    141,
    140,
    26,
    161,
    4,
    8,
    8,
    128,
    69,
    11,
    133,
    227,
    9,
    73,
    240,
    164,
    223,
    207,
    183,
    10,
    44,
    5,
    232,
    219,
    166,
    220,
    221,
    2,
    183,
    125,
    21,
    202,
    55,
    138,
    205,
    228,
    149,
    123,
    91,
    148,
    13,
    224,
    175,
    187,
    134,
    207,
    154,
    138,
    179,
    52,
    151,
    223,
    225,
    253,
    118,
    4,
    218,
    236,
    249,
    144,
    107,
    42,
    66,
    80,
    133,
    41,
    234,
    177,
    50,
    101,
    197,
    4,
    121,
    20,
    130,
    204,
    255,
    228,
    141,
    212,
    94,
    27,
    232,
    156,
    143,
    12,
    77,
    7,
    248,
    53,
    174,
    10,
    13,
    229,
    139,
    91,
    75,
    85,
    218,
    159,
    189,
    152,
    148,
    232,
    156,
    45,
    202,
    80,
    194,
    181,
    159,
    99,
    241,
    108,
    14,
    236,
    73,
    179,
    152,
    191,
    223,
    105,
    226,
    33,
    204,
    182,
    72,
    83,
    147,
    121,
    142,
    56,
    226,
    95,
    144,
    40,
    33,
    73,
    219,
    168,
    85,
    66,
    205,
    203,
    61,
    78,
    59,
    63,
    170,
    146,
    148,
    199,
    56,
    16,
    187,
    245,
    98,
    116,
    124,
    145,
    31,
    204,
    207,
    178,
    183,
    243,
    152,
    65,
    89,
    233,
    249,
    131,
    96,
    32,
    143,
    196,
    210,
    168,
    180,
    250,
    111,
    227,
    130,
    101,
    172,
    66,
    189,
    238,
    231,
    0,
    115,
    225,
    92,
    101,
    33,
    240,
    164,
    81,
    206,
    225,
    246,
    129,
    239,
    101,
    103,
    111,
    143,
    64,
    231,
    224,
    119,
    210,
    243,
    68,
    226,
    166,
    75,
    142,
    136,
    216,
    2,
    99,
    151,
    22,
    201,
    189,
    20,
    178,
    222,
    4,
    94,
    63,
    147,
    207,
    219,
    6,
    147,
    203,
    204,
    235,
    118,
    89,
    87,
    219,
    29,
    173,
    153,
    98,
    26,
    57,
    254,
    229,
    231,
    110,
    38,
    41,
    48,
    94
  ]);
  @override
  String get supabaseUrl => _get('SUPABASE_URL');

  @override
  String get supabaseKey => _get('SUPABASE_KEY');

  @override
  String get azureKey => _get('AZURE_KEY');

  @override
  String get azureRegion => _get('AZURE_REGION');

  T _get<T>(
    String key, {
    T Function(String)? fromString,
  }) {
    T _parseValue(String strValue) {
      if (T == String) {
        return (strValue) as T;
      } else if (T == int) {
        return int.parse(strValue) as T;
      } else if (T == double) {
        return double.parse(strValue) as T;
      } else if (T == bool) {
        return (strValue.toLowerCase() == 'true') as T;
      } else if (T == Enum || fromString != null) {
        if (fromString == null) {
          throw Exception('fromString is required for Enum');
        }

        return fromString(strValue.split('.').last);
      }

      throw Exception('Type ${T.toString()} not supported');
    }

    final encryptionKey = base64.decode(_encryptionKey.trim());
    final iv = base64.decode(_iv.trim());
    final decrypted =
        AESCBCEncryper.aesCbcDecrypt(encryptionKey, iv, _encryptedValues);
    final jsonMap = json.decode(decrypted) as Map<String, dynamic>;
    if (!jsonMap.containsKey(key)) {
      throw Exception('Key $key not found in .env file');
    }

    final encryptedValue = jsonMap[key] as String;
    final decryptedValue = AESCBCEncryper.aesCbcDecrypt(
      encryptionKey,
      iv,
      base64.decode(encryptedValue),
    );
    return _parseValue(decryptedValue);
  }
}
