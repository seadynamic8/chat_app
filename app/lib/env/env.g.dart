// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'env.dart';

// **************************************************************************
// SecureDotEnvAnnotationGenerator
// **************************************************************************

class _$Env extends Env {
  const _$Env(this._encryptionKey, this._iv) : super._();

  final String _encryptionKey;
  final String _iv;
  static final Uint8List _encryptedValues = Uint8List.fromList([
    151,
    254,
    91,
    254,
    41,
    84,
    26,
    49,
    191,
    140,
    226,
    241,
    100,
    217,
    77,
    141,
    195,
    41,
    81,
    203,
    80,
    123,
    116,
    143,
    251,
    202,
    243,
    148,
    26,
    103,
    28,
    12,
    72,
    65,
    176,
    169,
    186,
    68,
    175,
    166,
    88,
    218,
    240,
    61,
    255,
    103,
    211,
    114,
    101,
    41,
    219,
    31,
    184,
    204,
    254,
    109,
    77,
    109,
    59,
    223,
    55,
    88,
    79,
    68,
    64,
    84,
    179,
    79,
    130,
    163,
    57,
    2,
    201,
    217,
    180,
    255,
    13,
    2,
    160,
    252,
    100,
    161,
    54,
    37,
    115,
    198,
    189,
    27,
    161,
    204,
    20,
    116,
    157,
    83,
    184,
    91,
    83,
    7,
    151,
    242,
    154,
    145,
    139,
    168,
    106,
    70,
    196,
    153,
    21,
    55,
    116,
    62,
    207,
    77,
    144,
    89,
    105,
    156,
    167,
    50,
    237,
    74,
    168,
    168,
    142,
    177,
    226,
    97,
    81,
    63,
    183,
    195,
    245,
    20,
    124,
    156,
    23,
    3,
    208,
    133,
    176,
    142,
    192,
    239,
    130,
    133,
    20,
    205,
    154,
    161,
    227,
    137,
    185,
    95,
    164,
    121,
    110,
    90,
    61,
    83,
    22,
    138,
    231,
    95,
    103,
    69,
    206,
    129,
    108,
    6,
    198,
    56,
    33,
    20,
    4,
    171,
    3,
    97,
    245,
    170,
    163,
    129,
    248,
    24,
    132,
    13,
    119,
    106,
    37,
    45,
    183,
    252,
    222,
    31,
    126,
    240,
    20,
    140,
    40,
    102,
    72,
    241,
    167,
    88,
    3,
    239,
    251,
    53,
    176,
    12,
    152,
    55,
    153,
    247,
    161,
    147,
    28,
    136,
    186,
    144,
    9,
    7,
    145,
    215,
    206,
    215,
    43,
    18,
    109,
    133,
    208,
    114,
    112,
    12,
    78,
    146,
    59,
    10,
    115,
    16,
    177,
    181,
    106,
    197,
    41,
    110,
    15,
    148,
    106,
    206,
    168,
    226,
    111,
    146,
    72,
    115,
    24,
    167,
    211,
    124,
    252,
    158,
    133,
    234,
    129,
    107,
    176,
    61,
    176,
    186,
    252,
    196,
    216,
    36,
    50,
    28,
    27,
    78,
    39,
    103,
    219,
    11,
    64,
    42,
    130,
    163,
    67,
    129,
    187,
    111,
    143,
    158,
    215,
    34,
    102,
    135,
    218,
    209,
    154,
    61,
    240,
    15,
    58,
    253,
    23,
    234,
    85,
    198,
    106,
    51,
    248,
    29,
    112,
    173,
    90,
    136,
    176,
    26,
    190,
    98,
    18,
    52,
    232,
    189,
    239,
    0,
    48,
    106,
    205,
    66,
    241,
    209,
    141,
    4,
    6,
    92,
    237,
    227,
    196,
    246,
    167,
    88,
    84,
    81,
    44,
    45,
    182,
    129,
    7,
    104,
    119,
    14,
    97,
    164,
    196,
    112,
    16,
    122,
    216,
    143,
    166,
    145,
    182,
    51,
    181,
    145,
    74,
    140,
    98,
    43,
    106,
    149,
    11,
    52,
    55,
    147,
    187,
    83,
    45,
    15,
    65,
    62,
    82,
    239,
    212,
    24,
    142,
    206,
    110,
    180,
    148,
    73,
    162,
    34,
    103,
    97,
    166,
    76,
    251,
    254,
    123,
    39,
    112,
    6,
    0,
    56,
    239,
    220,
    90,
    135,
    67,
    235,
    220,
    192,
    67,
    77,
    1,
    16,
    142,
    223,
    39,
    74,
    161,
    124,
    111,
    88,
    165,
    175,
    184,
    208,
    110,
    144,
    49,
    87,
    8,
    147,
    135,
    89,
    88,
    82,
    119,
    221,
    130,
    215,
    130,
    219,
    145,
    75,
    139,
    132,
    246,
    18,
    147,
    56,
    143,
    191,
    54,
    246,
    173,
    229,
    30,
    163,
    249,
    78,
    142,
    93,
    54,
    235,
    206,
    226,
    182,
    76,
    48,
    212,
    145,
    21,
    3,
    141,
    113,
    125,
    41,
    32,
    107,
    143,
    236,
    241,
    84,
    166,
    101,
    50,
    252,
    38,
    47,
    189,
    113,
    79,
    49,
    188,
    199,
    9,
    99,
    240,
    82,
    22,
    27,
    173,
    148,
    68,
    56,
    201,
    35,
    85,
    47,
    98,
    171,
    71,
    64,
    46,
    65,
    250,
    229,
    55,
    249,
    23,
    54,
    9,
    131,
    41,
    114,
    245,
    16,
    191,
    191,
    33,
    2,
    95,
    252,
    28,
    29,
    111,
    142,
    185,
    187,
    170,
    74,
    129,
    238,
    125,
    116,
    100,
    141,
    28,
    125,
    17,
    21,
    227,
    222,
    108,
    192,
    173,
    192,
    223,
    248,
    150,
    131,
    50,
    101,
    232,
    89,
    249,
    131,
    204,
    200,
    210,
    252,
    82,
    210,
    234,
    25,
    181,
    226,
    87,
    28,
    104,
    150,
    186,
    253,
    66,
    28,
    43,
    229,
    4,
    130,
    157,
    183,
    28,
    104,
    234,
    108,
    15,
    230,
    228,
    151,
    244,
    226,
    51,
    105,
    115,
    38,
    149,
    194,
    121,
    222,
    203,
    103,
    77,
    84,
    146,
    22,
    68,
    168,
    37,
    244,
    95,
    188,
    109,
    183,
    201,
    251,
    86,
    53,
    15,
    203,
    131,
    148,
    64,
    121,
    128,
    231,
    50,
    222,
    211,
    164,
    222,
    120,
    56,
    159,
    242,
    73,
    7,
    214,
    207,
    38,
    94,
    227,
    44,
    192,
    8,
    66,
    15,
    167,
    48,
    124,
    148,
    41,
    250,
    164,
    204,
    254,
    135,
    253,
    100,
    123,
    80,
    80,
    219,
    219,
    155,
    57,
    165,
    1,
    104,
    203,
    62,
    231,
    73,
    69,
    208,
    62,
    147,
    116,
    92,
    138,
    13,
    227,
    89,
    43,
    96,
    120,
    127,
    21,
    128,
    255,
    214,
    197,
    212,
    8,
    201,
    132,
    37,
    251,
    196,
    15,
    191,
    96,
    237,
    109,
    193,
    123,
    107,
    12,
    89,
    17,
    221,
    29,
    162,
    46,
    125,
    144,
    40,
    183,
    160,
    196,
    91,
    133,
    255,
    6,
    43,
    23,
    219,
    25,
    194,
    254,
    200,
    85,
    209,
    33,
    166,
    92,
    219,
    116,
    199,
    228,
    102,
    165,
    121,
    254,
    139,
    195,
    173,
    190,
    213,
    97,
    201,
    40,
    226,
    45,
    181
  ]);
  @override
  String get supabaseUrl => _get('SUPABASE_URL');

  @override
  String get supabaseKey => _get('SUPABASE_KEY');

  @override
  String get azureKey => _get('AZURE_KEY');

  @override
  String get azureRegion => _get('AZURE_REGION');

  @override
  String get videoSdkTokenTemp => _get('VIDEO_SDK_TOKEN_TEMP');

  T _get<T>(
    String key, {
    T Function(String)? fromString,
  }) {
    T _parseValue(String strValue) {
      if (T == String) {
        return (strValue) as T;
      } else if (T == int) {
        return int.parse(strValue) as T;
      } else if (T == double) {
        return double.parse(strValue) as T;
      } else if (T == bool) {
        return (strValue.toLowerCase() == 'true') as T;
      } else if (T == Enum || fromString != null) {
        if (fromString == null) {
          throw Exception('fromString is required for Enum');
        }

        return fromString(strValue.split('.').last);
      }

      throw Exception('Type ${T.toString()} not supported');
    }

    final encryptionKey = base64.decode(_encryptionKey.trim());
    final iv = base64.decode(_iv.trim());
    final decrypted =
        AESCBCEncryper.aesCbcDecrypt(encryptionKey, iv, _encryptedValues);
    final jsonMap = json.decode(decrypted) as Map<String, dynamic>;
    if (!jsonMap.containsKey(key)) {
      throw Exception('Key $key not found in .env file');
    }

    final encryptedValue = jsonMap[key] as String;
    final decryptedValue = AESCBCEncryper.aesCbcDecrypt(
      encryptionKey,
      iv,
      base64.decode(encryptedValue),
    );
    return _parseValue(decryptedValue);
  }
}
