// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'env.dart';

// **************************************************************************
// SecureDotEnvAnnotationGenerator
// **************************************************************************

class _$Env extends Env {
  const _$Env(this._encryptionKey, this._iv) : super._();

  final String _encryptionKey;
  final String _iv;
  static final Uint8List _encryptedValues = Uint8List.fromList([
    124,
    184,
    39,
    240,
    182,
    93,
    106,
    23,
    136,
    251,
    49,
    137,
    33,
    7,
    193,
    8,
    116,
    40,
    112,
    66,
    86,
    123,
    52,
    55,
    135,
    243,
    238,
    79,
    241,
    100,
    27,
    137,
    197,
    218,
    187,
    236,
    198,
    177,
    214,
    70,
    59,
    86,
    166,
    42,
    45,
    204,
    191,
    4,
    99,
    248,
    234,
    129,
    95,
    40,
    127,
    177,
    190,
    232,
    88,
    116,
    18,
    227,
    193,
    70,
    201,
    95,
    6,
    96,
    87,
    160,
    186,
    129,
    28,
    220,
    71,
    129,
    27,
    30,
    52,
    184,
    178,
    232,
    218,
    20,
    130,
    202,
    150,
    171,
    31,
    248,
    74,
    91,
    57,
    42,
    122,
    53,
    233,
    255,
    248,
    131,
    41,
    151,
    150,
    198,
    33,
    63,
    200,
    25,
    177,
    12,
    116,
    167,
    242,
    157,
    113,
    195,
    239,
    99,
    25,
    188,
    202,
    128,
    141,
    52,
    173,
    127,
    46,
    32,
    71,
    44,
    60,
    88,
    199,
    239,
    62,
    197,
    228,
    0,
    66,
    92,
    132,
    202,
    143,
    90,
    238,
    247,
    36,
    122,
    24,
    235,
    247,
    72,
    166,
    241,
    221,
    32,
    239,
    241,
    173,
    151,
    2,
    72,
    98,
    241,
    94,
    167,
    254,
    125,
    44,
    148,
    162,
    145,
    49,
    217,
    143,
    39,
    147,
    1,
    65,
    13,
    62,
    49,
    62,
    213,
    199,
    153,
    148,
    126,
    81,
    223,
    39,
    85,
    93,
    39,
    189,
    26,
    222,
    162,
    106,
    227,
    80,
    48,
    31,
    109,
    75,
    171,
    238,
    72,
    76,
    234,
    83,
    83,
    160,
    222,
    239,
    247,
    245,
    240,
    71,
    230,
    16,
    231,
    116,
    43,
    159,
    219,
    212,
    76,
    147,
    111,
    184,
    144,
    90,
    191,
    58,
    236,
    13,
    148,
    92,
    49,
    234,
    242,
    38,
    46,
    171,
    227,
    225,
    19,
    119,
    36,
    237,
    10,
    14,
    168,
    85,
    192,
    224,
    62,
    245,
    162,
    169,
    255,
    0,
    45,
    254,
    166,
    0,
    183,
    95,
    76,
    71,
    176,
    222,
    41,
    209,
    6,
    15,
    120,
    80,
    75,
    70,
    120,
    51,
    148,
    84,
    146,
    60,
    249,
    45,
    126,
    186,
    137,
    200,
    61,
    117,
    96,
    38,
    46,
    113,
    3,
    4,
    58,
    89,
    175,
    174,
    22,
    73,
    88,
    149,
    152,
    156,
    195,
    187,
    236,
    186,
    129,
    74,
    226,
    212,
    224,
    68,
    146,
    89,
    108,
    250,
    192,
    105,
    134,
    92,
    67,
    16,
    95,
    84,
    125,
    50,
    76,
    245,
    171,
    133,
    170,
    39,
    118,
    214,
    109,
    253,
    157,
    212,
    165,
    76,
    32,
    149,
    144,
    206,
    33,
    207,
    191,
    14,
    117,
    195,
    33,
    200,
    237,
    162,
    144,
    251,
    115,
    81,
    131,
    175,
    23,
    25,
    196,
    77,
    174,
    141,
    201,
    230,
    202,
    52,
    64,
    152,
    65,
    170,
    57,
    160,
    92,
    191,
    12,
    46,
    236,
    22,
    64,
    250,
    201,
    249,
    146,
    76,
    13,
    223,
    242,
    43,
    77,
    99,
    221,
    176,
    22,
    131,
    70,
    74,
    97,
    175,
    95,
    191,
    206,
    205,
    12,
    139,
    23,
    115,
    28,
    120,
    117,
    171,
    103,
    48,
    19,
    170,
    116,
    185,
    244,
    13,
    86,
    132,
    157,
    18,
    91,
    255,
    183,
    127,
    66,
    182,
    93,
    235,
    160,
    239,
    214,
    115,
    171,
    8,
    188,
    81,
    239,
    221,
    108,
    66,
    104,
    224,
    134,
    193,
    205,
    164,
    88,
    139,
    75,
    162,
    174,
    53,
    254,
    234,
    68,
    243,
    95,
    206,
    98,
    250,
    192,
    33,
    81,
    84,
    38,
    114,
    57,
    15,
    191,
    126,
    140,
    5,
    56,
    214,
    36,
    221,
    154,
    218,
    105,
    79,
    37,
    54,
    18,
    249,
    226,
    242,
    160,
    5,
    48,
    238,
    72,
    136,
    99,
    68,
    107,
    169,
    2,
    40,
    198,
    38,
    209,
    168,
    42,
    69,
    179,
    17,
    141,
    98,
    202,
    182,
    130,
    131,
    121,
    186,
    105,
    77,
    69,
    207,
    162,
    142,
    132,
    13,
    16,
    19,
    204,
    109,
    242,
    184,
    193,
    6,
    15,
    71,
    106,
    69,
    233,
    155,
    49,
    191,
    249,
    224,
    3,
    92,
    234,
    103,
    178,
    179,
    222,
    112,
    114,
    111,
    153,
    89,
    169,
    153,
    64,
    233,
    118,
    189,
    0,
    32,
    141,
    17,
    116,
    76,
    141,
    195,
    86,
    226,
    156,
    132,
    160,
    201,
    204,
    225,
    238,
    150,
    110,
    1,
    30,
    153,
    69,
    179,
    247,
    255,
    174,
    178,
    237,
    137,
    103,
    28,
    57,
    113,
    183,
    153,
    191,
    4,
    67,
    245,
    103,
    131,
    229,
    61,
    246,
    146,
    239,
    135,
    189,
    199,
    177,
    98,
    175,
    60,
    167,
    98,
    247,
    159,
    237,
    114,
    238,
    236,
    155,
    151,
    183,
    173,
    125,
    102,
    123,
    100,
    56,
    229,
    43,
    13,
    34,
    178,
    191,
    36,
    64,
    12,
    180,
    193,
    233,
    92,
    171,
    19,
    122,
    14,
    59,
    129,
    234,
    140,
    128,
    162,
    191,
    238,
    174,
    134,
    111,
    60,
    49,
    95,
    172,
    137,
    149,
    70,
    199,
    185,
    43,
    81,
    174,
    198,
    121,
    67,
    53,
    175,
    137,
    207,
    234,
    53,
    206,
    157,
    242,
    214,
    154,
    206,
    248,
    110,
    88,
    158,
    209,
    246,
    169,
    128,
    24,
    131,
    110,
    91,
    87,
    102,
    9,
    207,
    129,
    104,
    181,
    95,
    7,
    81,
    28,
    200,
    24,
    83,
    140,
    71,
    27,
    159,
    105,
    220,
    141,
    202,
    75,
    225,
    242,
    93,
    85,
    158,
    166,
    101,
    196,
    158,
    210,
    112,
    102,
    61,
    54,
    53,
    28,
    129,
    177,
    238,
    93,
    237,
    21,
    117,
    60,
    2,
    94,
    65,
    75,
    29,
    136,
    137,
    20,
    143,
    236
  ]);
  @override
  String get supabaseUrl => _get('SUPABASE_URL');

  @override
  String get supabaseKey => _get('SUPABASE_KEY');

  @override
  String get azureKey => _get('AZURE_KEY');

  @override
  String get azureRegion => _get('AZURE_REGION');

  @override
  String get videoSdkTokenTemp => _get('VIDEO_SDK_TOKEN_TEMP');

  T _get<T>(
    String key, {
    T Function(String)? fromString,
  }) {
    T _parseValue(String strValue) {
      if (T == String) {
        return (strValue) as T;
      } else if (T == int) {
        return int.parse(strValue) as T;
      } else if (T == double) {
        return double.parse(strValue) as T;
      } else if (T == bool) {
        return (strValue.toLowerCase() == 'true') as T;
      } else if (T == Enum || fromString != null) {
        if (fromString == null) {
          throw Exception('fromString is required for Enum');
        }

        return fromString(strValue.split('.').last);
      }

      throw Exception('Type ${T.toString()} not supported');
    }

    final encryptionKey = base64.decode(_encryptionKey.trim());
    final iv = base64.decode(_iv.trim());
    final decrypted =
        AESCBCEncryper.aesCbcDecrypt(encryptionKey, iv, _encryptedValues);
    final jsonMap = json.decode(decrypted) as Map<String, dynamic>;
    if (!jsonMap.containsKey(key)) {
      throw Exception('Key $key not found in .env file');
    }

    final encryptedValue = jsonMap[key] as String;
    final decryptedValue = AESCBCEncryper.aesCbcDecrypt(
      encryptionKey,
      iv,
      base64.decode(encryptedValue),
    );
    return _parseValue(decryptedValue);
  }
}
