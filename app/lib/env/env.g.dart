// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'env.dart';

// **************************************************************************
// SecureDotEnvAnnotationGenerator
// **************************************************************************

class _$Env extends Env {
  const _$Env(this._encryptionKey, this._iv) : super._();

  final String _encryptionKey;
  final String _iv;
  static final Uint8List _encryptedValues = Uint8List.fromList([
    156,
    29,
    153,
    187,
    131,
    231,
    57,
    213,
    35,
    133,
    41,
    24,
    139,
    2,
    3,
    131,
    141,
    135,
    49,
    116,
    171,
    234,
    130,
    109,
    223,
    12,
    247,
    0,
    117,
    235,
    82,
    151,
    159,
    45,
    31,
    214,
    155,
    4,
    83,
    67,
    158,
    86,
    38,
    194,
    210,
    132,
    142,
    133,
    125,
    14,
    148,
    15,
    180,
    9,
    193,
    155,
    131,
    193,
    127,
    213,
    200,
    208,
    67,
    83,
    31,
    162,
    146,
    180,
    159,
    9,
    7,
    122,
    44,
    225,
    239,
    241,
    137,
    234,
    215,
    207,
    156,
    216,
    218,
    7,
    151,
    124,
    213,
    64,
    167,
    169,
    223,
    100,
    171,
    91,
    204,
    226,
    198,
    250,
    196,
    149,
    128,
    125,
    42,
    28,
    24,
    34,
    138,
    208,
    12,
    120,
    75,
    171,
    231,
    63,
    92,
    230,
    215,
    28,
    31,
    78,
    34,
    71,
    224,
    87,
    234,
    33,
    49,
    97,
    30,
    196,
    155,
    114,
    80,
    218,
    89,
    70,
    33,
    198,
    106,
    207,
    82,
    27,
    220,
    88,
    212,
    230,
    30,
    115,
    205,
    42,
    127,
    115,
    245,
    29,
    170,
    143,
    175,
    112,
    35,
    235,
    80,
    5,
    246,
    37,
    230,
    37,
    156,
    194,
    219,
    61,
    116,
    133,
    50,
    14,
    237,
    87,
    220,
    45,
    82,
    117,
    64,
    253,
    10,
    98,
    197,
    132,
    67,
    97,
    91,
    98,
    3,
    28,
    221,
    158,
    100,
    99,
    141,
    115,
    67,
    21,
    56,
    81,
    104,
    92,
    161,
    177,
    251,
    175,
    139,
    17,
    70,
    70,
    14,
    187,
    153,
    192,
    99,
    40,
    138,
    5,
    56,
    59,
    21,
    191,
    42,
    166,
    83,
    225,
    31,
    168,
    60,
    33,
    14,
    97,
    18,
    170,
    128,
    138,
    107,
    206,
    239,
    86,
    215,
    165,
    39,
    160,
    79,
    75,
    95,
    71,
    191,
    228,
    59,
    28,
    219,
    18,
    233,
    160,
    25,
    190,
    96,
    162,
    17,
    27,
    202,
    87,
    183,
    71,
    242,
    166,
    251,
    97,
    201,
    224,
    238,
    140,
    135,
    7,
    103,
    139,
    237,
    173,
    223,
    53,
    183,
    124,
    87,
    70,
    12,
    124,
    59,
    158,
    217,
    57,
    50,
    219,
    103,
    92,
    169,
    230,
    142,
    19,
    209,
    236
  ]);
  @override
  String get supabaseUrl => _get('SUPABASE_URL');

  @override
  String get supabaseKey => _get('SUPABASE_KEY');

  T _get<T>(
    String key, {
    T Function(String)? fromString,
  }) {
    T _parseValue(String strValue) {
      if (T == String) {
        return (strValue) as T;
      } else if (T == int) {
        return int.parse(strValue) as T;
      } else if (T == double) {
        return double.parse(strValue) as T;
      } else if (T == bool) {
        return (strValue.toLowerCase() == 'true') as T;
      } else if (T == Enum || fromString != null) {
        if (fromString == null) {
          throw Exception('fromString is required for Enum');
        }

        return fromString(strValue.split('.').last);
      }

      throw Exception('Type ${T.toString()} not supported');
    }

    final encryptionKey = base64.decode(_encryptionKey.trim());
    final iv = base64.decode(_iv.trim());
    final decrypted =
        AESCBCEncryper.aesCbcDecrypt(encryptionKey, iv, _encryptedValues);
    final jsonMap = json.decode(decrypted) as Map<String, dynamic>;
    if (!jsonMap.containsKey(key)) {
      throw Exception('Key $key not found in .env file');
    }

    final encryptedValue = jsonMap[key] as String;
    final decryptedValue = AESCBCEncryper.aesCbcDecrypt(
      encryptionKey,
      iv,
      base64.decode(encryptedValue),
    );
    return _parseValue(decryptedValue);
  }
}
