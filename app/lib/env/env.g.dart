// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'env.dart';

// **************************************************************************
// SecureDotEnvAnnotationGenerator
// **************************************************************************

class _$Env extends Env {
  const _$Env(this._encryptionKey, this._iv) : super._();

  final String _encryptionKey;
  final String _iv;
  static final Uint8List _encryptedValues = Uint8List.fromList([
    79,
    15,
    36,
    124,
    87,
    26,
    53,
    85,
    173,
    84,
    22,
    199,
    182,
    52,
    113,
    238,
    207,
    183,
    176,
    66,
    137,
    98,
    128,
    191,
    21,
    11,
    15,
    171,
    17,
    163,
    186,
    24,
    92,
    6,
    83,
    244,
    246,
    163,
    191,
    150,
    24,
    151,
    234,
    178,
    12,
    226,
    123,
    48,
    147,
    224,
    83,
    133,
    6,
    138,
    231,
    79,
    63,
    120,
    101,
    108,
    156,
    80,
    209,
    192,
    198,
    132,
    207,
    118,
    121,
    158,
    42,
    234,
    19,
    147,
    70,
    44,
    164,
    165,
    122,
    181,
    89,
    0,
    74,
    160,
    76,
    142,
    221,
    47,
    11,
    242,
    137,
    25,
    188,
    84,
    113,
    107,
    68,
    46,
    106,
    19,
    36,
    139,
    191,
    119,
    31,
    37,
    87,
    60,
    237,
    45,
    112,
    50,
    202,
    184,
    244,
    43,
    195,
    129,
    139,
    126,
    182,
    242,
    219,
    244,
    165,
    211,
    162,
    214,
    57,
    138,
    126,
    153,
    112,
    43,
    248,
    15,
    189,
    197,
    175,
    200,
    140,
    231,
    242,
    155,
    129,
    223,
    50,
    119,
    80,
    255,
    115,
    165,
    47,
    151,
    181,
    147,
    16,
    4,
    74,
    218,
    135,
    40,
    247,
    97,
    27,
    32,
    254,
    206,
    102,
    172,
    243,
    91,
    77,
    150,
    170,
    204,
    176,
    141,
    207,
    20,
    62,
    140,
    69,
    169,
    186,
    90,
    252,
    93,
    251,
    167,
    203,
    57,
    69,
    81,
    183,
    91,
    8,
    7,
    91,
    212,
    19,
    70,
    238,
    30,
    179,
    137,
    113,
    109,
    1,
    227,
    30,
    101,
    37,
    46,
    99,
    0,
    72,
    70,
    108,
    234,
    142,
    215,
    132,
    69,
    218,
    26,
    249,
    123,
    148,
    93,
    40,
    158,
    188,
    188,
    192,
    210,
    160,
    163,
    37,
    55,
    7,
    68,
    210,
    42,
    4,
    159,
    102,
    247,
    37,
    143,
    66,
    69,
    60,
    103,
    38,
    224,
    88,
    193,
    50,
    16,
    20,
    105,
    46,
    234,
    247,
    168,
    67,
    119,
    79,
    223,
    102,
    206,
    26,
    222,
    38,
    99,
    7,
    5,
    245,
    10,
    49,
    92,
    146,
    74,
    151,
    148,
    93,
    234,
    105,
    189,
    214,
    142,
    52,
    20,
    111,
    133,
    120,
    13,
    166,
    90,
    110,
    48,
    171,
    92,
    210,
    85,
    232,
    181,
    48,
    203,
    99,
    151,
    130,
    14,
    233,
    110,
    164,
    227,
    250,
    142,
    10,
    131,
    211,
    182,
    100,
    62,
    157,
    238,
    225,
    99,
    101,
    50,
    24,
    73,
    24,
    76,
    218,
    208,
    226,
    139,
    151,
    126,
    143,
    131,
    108,
    229,
    7,
    135,
    118,
    223,
    225,
    16,
    185,
    218,
    66,
    196,
    119,
    236,
    102,
    71,
    44,
    55,
    226,
    53,
    35,
    133,
    137,
    90,
    74,
    109,
    46,
    25,
    55,
    229,
    225,
    95,
    47,
    149,
    11,
    209,
    44,
    14,
    210,
    200,
    30,
    214,
    137,
    165,
    41,
    53,
    156,
    205,
    11,
    219,
    154,
    166,
    251,
    68,
    124,
    219,
    199,
    47,
    217,
    46,
    118,
    198,
    84,
    21,
    157,
    97,
    165,
    185,
    25,
    25,
    22,
    159,
    20,
    27,
    39,
    86,
    179,
    242,
    164,
    197,
    227,
    52,
    118,
    32,
    143,
    155,
    187,
    207
  ]);
  @override
  String get supabaseUrl => _get('SUPABASE_URL');

  @override
  String get supabaseKey => _get('SUPABASE_KEY');

  @override
  String get azureKey => _get('AZURE_KEY');

  @override
  String get azureRegion => _get('AZURE_REGION');

  T _get<T>(
    String key, {
    T Function(String)? fromString,
  }) {
    T _parseValue(String strValue) {
      if (T == String) {
        return (strValue) as T;
      } else if (T == int) {
        return int.parse(strValue) as T;
      } else if (T == double) {
        return double.parse(strValue) as T;
      } else if (T == bool) {
        return (strValue.toLowerCase() == 'true') as T;
      } else if (T == Enum || fromString != null) {
        if (fromString == null) {
          throw Exception('fromString is required for Enum');
        }

        return fromString(strValue.split('.').last);
      }

      throw Exception('Type ${T.toString()} not supported');
    }

    final encryptionKey = base64.decode(_encryptionKey.trim());
    final iv = base64.decode(_iv.trim());
    final decrypted =
        AESCBCEncryper.aesCbcDecrypt(encryptionKey, iv, _encryptedValues);
    final jsonMap = json.decode(decrypted) as Map<String, dynamic>;
    if (!jsonMap.containsKey(key)) {
      throw Exception('Key $key not found in .env file');
    }

    final encryptedValue = jsonMap[key] as String;
    final decryptedValue = AESCBCEncryper.aesCbcDecrypt(
      encryptionKey,
      iv,
      base64.decode(encryptedValue),
    );
    return _parseValue(decryptedValue);
  }
}
