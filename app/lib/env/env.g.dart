// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'env.dart';

// **************************************************************************
// SecureDotEnvAnnotationGenerator
// **************************************************************************

class _$Env extends Env {
  const _$Env(this._encryptionKey, this._iv) : super._();

  final String _encryptionKey;
  final String _iv;
  static final Uint8List _encryptedValues = Uint8List.fromList([
    94,
    9,
    56,
    38,
    235,
    54,
    223,
    118,
    73,
    246,
    191,
    225,
    187,
    236,
    147,
    7,
    159,
    86,
    89,
    182,
    214,
    17,
    78,
    203,
    179,
    71,
    57,
    120,
    106,
    205,
    164,
    185,
    211,
    127,
    138,
    132,
    39,
    84,
    167,
    123,
    207,
    86,
    219,
    111,
    77,
    20,
    123,
    184,
    154,
    20,
    70,
    245,
    240,
    172,
    154,
    67,
    7,
    67,
    179,
    32,
    147,
    232,
    135,
    197,
    116,
    45,
    175,
    176,
    58,
    154,
    163,
    152,
    221,
    230,
    238,
    110,
    147,
    98,
    70,
    45,
    173,
    132,
    140,
    109,
    152,
    181,
    214,
    254,
    104,
    201,
    178,
    151,
    247,
    199,
    171,
    11,
    28,
    82,
    233,
    171,
    104,
    214,
    49,
    197,
    183,
    191,
    23,
    125,
    73,
    182,
    174,
    211,
    223,
    15,
    98,
    35,
    44,
    160,
    67,
    249,
    134,
    71,
    33,
    188,
    13,
    231,
    241,
    2,
    38,
    84,
    246,
    243,
    251,
    138,
    159,
    83,
    75,
    124,
    33,
    239,
    203,
    250,
    35,
    130,
    20,
    134,
    105,
    93,
    222,
    66,
    38,
    100,
    92,
    151,
    224,
    84,
    5,
    64,
    153,
    224,
    115,
    22,
    24,
    255,
    122,
    84,
    90,
    83,
    146,
    125,
    47,
    83,
    82,
    254,
    53,
    103,
    62,
    22,
    37,
    102,
    88,
    12,
    143,
    33,
    185,
    142,
    158,
    150,
    179,
    73,
    77,
    60,
    168,
    140,
    126,
    27,
    193,
    144,
    236,
    237,
    56,
    186,
    200,
    200,
    201,
    13,
    19,
    184,
    170,
    158,
    237,
    111,
    186,
    23,
    208,
    181,
    74,
    213,
    185,
    24,
    62,
    223,
    253,
    110,
    107,
    85,
    59,
    49,
    181,
    70,
    84,
    160,
    144,
    156,
    212,
    147,
    237,
    193,
    10,
    65,
    21,
    29,
    183,
    33,
    196,
    246,
    236,
    165,
    90,
    79,
    180,
    227,
    5,
    237,
    126,
    152,
    83,
    67,
    103,
    240,
    196,
    153,
    236,
    166,
    46,
    41,
    142,
    22,
    225,
    166,
    107,
    143,
    205,
    19,
    106,
    139,
    249,
    212,
    203,
    101,
    37,
    96,
    129,
    206,
    149,
    189,
    55,
    201,
    77,
    251,
    13,
    86,
    190,
    86,
    250,
    76,
    138,
    174,
    252,
    114,
    10,
    85,
    247,
    138,
    180,
    235,
    102,
    79,
    49,
    44,
    186,
    236,
    100,
    231,
    208,
    201,
    142,
    91,
    109,
    54,
    231,
    164,
    254,
    218,
    141,
    110,
    46,
    238,
    53,
    72,
    5,
    172,
    5,
    185,
    49,
    152,
    90,
    38,
    132,
    129,
    132,
    116,
    168,
    234,
    134,
    161,
    196,
    138,
    164,
    46,
    252,
    81,
    69,
    27,
    114,
    193,
    166,
    140,
    52,
    148,
    158,
    172,
    35,
    47,
    225,
    245,
    141,
    52,
    245,
    96,
    98,
    59,
    166,
    79,
    153,
    31,
    180,
    77,
    41,
    34,
    101,
    210,
    133,
    129,
    124,
    179,
    236,
    9,
    209,
    52,
    4,
    142,
    21,
    237,
    50,
    78,
    84,
    79,
    168,
    17,
    124,
    226,
    15,
    165,
    179,
    54,
    149,
    28,
    150,
    49,
    250,
    241,
    174,
    123,
    16,
    175,
    65,
    25,
    83,
    166,
    45,
    40,
    216,
    151,
    39,
    80,
    55,
    175,
    210,
    217,
    140,
    99
  ]);
  @override
  String get supabaseUrl => _get('SUPABASE_URL');

  @override
  String get supabaseKey => _get('SUPABASE_KEY');

  @override
  String get azureKey => _get('AZURE_KEY');

  @override
  String get azureRegion => _get('AZURE_REGION');

  T _get<T>(
    String key, {
    T Function(String)? fromString,
  }) {
    T _parseValue(String strValue) {
      if (T == String) {
        return (strValue) as T;
      } else if (T == int) {
        return int.parse(strValue) as T;
      } else if (T == double) {
        return double.parse(strValue) as T;
      } else if (T == bool) {
        return (strValue.toLowerCase() == 'true') as T;
      } else if (T == Enum || fromString != null) {
        if (fromString == null) {
          throw Exception('fromString is required for Enum');
        }

        return fromString(strValue.split('.').last);
      }

      throw Exception('Type ${T.toString()} not supported');
    }

    final encryptionKey = base64.decode(_encryptionKey.trim());
    final iv = base64.decode(_iv.trim());
    final decrypted =
        AESCBCEncryper.aesCbcDecrypt(encryptionKey, iv, _encryptedValues);
    final jsonMap = json.decode(decrypted) as Map<String, dynamic>;
    if (!jsonMap.containsKey(key)) {
      throw Exception('Key $key not found in .env file');
    }

    final encryptedValue = jsonMap[key] as String;
    final decryptedValue = AESCBCEncryper.aesCbcDecrypt(
      encryptionKey,
      iv,
      base64.decode(encryptedValue),
    );
    return _parseValue(decryptedValue);
  }
}
