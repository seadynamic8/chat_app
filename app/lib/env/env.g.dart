// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'env.dart';

// **************************************************************************
// SecureDotEnvAnnotationGenerator
// **************************************************************************

class _$Env extends Env {
  const _$Env(this._encryptionKey, this._iv) : super._();

  final String _encryptionKey;
  final String _iv;
  static final Uint8List _encryptedValues = Uint8List.fromList([
    145,
    212,
    1,
    110,
    26,
    186,
    225,
    86,
    93,
    63,
    168,
    15,
    185,
    42,
    231,
    52,
    158,
    247,
    32,
    85,
    201,
    242,
    20,
    178,
    227,
    185,
    91,
    161,
    56,
    146,
    101,
    81,
    180,
    241,
    214,
    187,
    148,
    120,
    162,
    131,
    68,
    121,
    235,
    158,
    67,
    145,
    0,
    124,
    199,
    30,
    185,
    236,
    242,
    219,
    148,
    156,
    43,
    124,
    8,
    250,
    215,
    238,
    164,
    254,
    144,
    20,
    7,
    74,
    188,
    228,
    54,
    137,
    74,
    87,
    201,
    29,
    9,
    229,
    58,
    220,
    83,
    185,
    54,
    112,
    44,
    71,
    225,
    230,
    124,
    238,
    54,
    31,
    40,
    96,
    5,
    249,
    150,
    225,
    55,
    240,
    0,
    233,
    215,
    22,
    161,
    114,
    246,
    82,
    192,
    62,
    91,
    122,
    182,
    102,
    75,
    54,
    227,
    198,
    86,
    115,
    10,
    132,
    200,
    32,
    98,
    143,
    198,
    200,
    246,
    240,
    81,
    146,
    15,
    73,
    125,
    154,
    30,
    121,
    167,
    2,
    11,
    180,
    222,
    47,
    177,
    36,
    147,
    63,
    12,
    47,
    182,
    67,
    229,
    171,
    121,
    200,
    119,
    57,
    228,
    67,
    137,
    241,
    75,
    25,
    31,
    76,
    51,
    236,
    156,
    191,
    209,
    138,
    49,
    91,
    5,
    192,
    16,
    28,
    172,
    23,
    57,
    74,
    131,
    58,
    144,
    244,
    135,
    131,
    128,
    42,
    161,
    1,
    130,
    173,
    221,
    187,
    126,
    78,
    173,
    159,
    86,
    109,
    133,
    102,
    192,
    90,
    176,
    232,
    216,
    46,
    201,
    187,
    147,
    198,
    202,
    30,
    190,
    133,
    247,
    108,
    17,
    231,
    14,
    30,
    236,
    59,
    72,
    20,
    27,
    214,
    43,
    61,
    139,
    72,
    213,
    133,
    137,
    60,
    210,
    220,
    252,
    112,
    187,
    99,
    144,
    107,
    221,
    246,
    76,
    28,
    63,
    103,
    80,
    44,
    0,
    121,
    197,
    134,
    63,
    40,
    111,
    181,
    50,
    247,
    29,
    23,
    252,
    9,
    100,
    80,
    108,
    110,
    104,
    75,
    130,
    155,
    46,
    169,
    81,
    247,
    53,
    131,
    177,
    221,
    137,
    10,
    33,
    79,
    26,
    41,
    42,
    157,
    116,
    176,
    3,
    53,
    76,
    91,
    255,
    197,
    217,
    240,
    191,
    23,
    250,
    222,
    86,
    156,
    228,
    45,
    251,
    209,
    207,
    170,
    55,
    254,
    92,
    234,
    63,
    197,
    34,
    159,
    99,
    56,
    104,
    101,
    37,
    94,
    234,
    135,
    79,
    22,
    155,
    48,
    137,
    28,
    152,
    26,
    140,
    48,
    255,
    108,
    82,
    52,
    174,
    140,
    196,
    29,
    245,
    151,
    185,
    191,
    122,
    136,
    20,
    152,
    125,
    210,
    2,
    1,
    72,
    2,
    201,
    1,
    183,
    95,
    120,
    241,
    37,
    24,
    203,
    243,
    185,
    167,
    130,
    20,
    226,
    21,
    53,
    212,
    37,
    6,
    63,
    51,
    176,
    205,
    12,
    242,
    174,
    128,
    70,
    104,
    8,
    170,
    174,
    146,
    103,
    184,
    40,
    248,
    119,
    46,
    106,
    156,
    229,
    150,
    176,
    90,
    64,
    102,
    193,
    38,
    192,
    90,
    33,
    154,
    151,
    120,
    1,
    202,
    11,
    46,
    40,
    134,
    208,
    10,
    49,
    23,
    200,
    105,
    16,
    168
  ]);
  @override
  String get supabaseUrl => _get('SUPABASE_URL');

  @override
  String get supabaseKey => _get('SUPABASE_KEY');

  @override
  String get azureKey => _get('AZURE_KEY');

  @override
  String get azureRegion => _get('AZURE_REGION');

  T _get<T>(
    String key, {
    T Function(String)? fromString,
  }) {
    T _parseValue(String strValue) {
      if (T == String) {
        return (strValue) as T;
      } else if (T == int) {
        return int.parse(strValue) as T;
      } else if (T == double) {
        return double.parse(strValue) as T;
      } else if (T == bool) {
        return (strValue.toLowerCase() == 'true') as T;
      } else if (T == Enum || fromString != null) {
        if (fromString == null) {
          throw Exception('fromString is required for Enum');
        }

        return fromString(strValue.split('.').last);
      }

      throw Exception('Type ${T.toString()} not supported');
    }

    final encryptionKey = base64.decode(_encryptionKey.trim());
    final iv = base64.decode(_iv.trim());
    final decrypted =
        AESCBCEncryper.aesCbcDecrypt(encryptionKey, iv, _encryptedValues);
    final jsonMap = json.decode(decrypted) as Map<String, dynamic>;
    if (!jsonMap.containsKey(key)) {
      throw Exception('Key $key not found in .env file');
    }

    final encryptedValue = jsonMap[key] as String;
    final decryptedValue = AESCBCEncryper.aesCbcDecrypt(
      encryptionKey,
      iv,
      base64.decode(encryptedValue),
    );
    return _parseValue(decryptedValue);
  }
}
