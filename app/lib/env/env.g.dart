// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'env.dart';

// **************************************************************************
// SecureDotEnvAnnotationGenerator
// **************************************************************************

class _$Env extends Env {
  const _$Env(this._encryptionKey, this._iv) : super._();

  final String _encryptionKey;
  final String _iv;
  static final Uint8List _encryptedValues = Uint8List.fromList([
    169,
    108,
    229,
    16,
    82,
    14,
    250,
    80,
    22,
    181,
    181,
    40,
    175,
    75,
    112,
    55,
    74,
    77,
    191,
    180,
    111,
    129,
    53,
    123,
    66,
    158,
    92,
    39,
    211,
    83,
    112,
    52,
    32,
    31,
    137,
    124,
    121,
    241,
    140,
    236,
    130,
    38,
    191,
    53,
    157,
    46,
    158,
    108,
    107,
    32,
    99,
    206,
    228,
    93,
    126,
    244,
    34,
    130,
    146,
    28,
    84,
    126,
    105,
    207,
    102,
    54,
    113,
    81,
    54,
    182,
    71,
    11,
    134,
    216,
    76,
    146,
    226,
    186,
    167,
    224,
    165,
    199,
    15,
    181,
    73,
    236,
    155,
    62,
    172,
    249,
    183,
    11,
    171,
    238,
    202,
    235,
    42,
    165,
    86,
    196,
    235,
    4,
    131,
    111,
    254,
    55,
    93,
    196,
    135,
    102,
    185,
    99,
    132,
    115,
    232,
    89,
    238,
    217,
    216,
    109,
    146,
    163,
    153,
    72,
    245,
    247,
    189,
    177,
    210,
    172,
    94,
    190,
    152,
    22,
    30,
    236,
    101,
    119,
    0,
    3,
    119,
    122,
    82,
    203,
    209,
    143,
    42,
    107,
    30,
    140,
    121,
    68,
    130,
    62,
    95,
    226,
    254,
    220,
    231,
    202,
    84,
    139,
    118,
    162,
    156,
    50,
    149,
    240,
    242,
    144,
    9,
    124,
    11,
    80,
    42,
    79,
    169,
    92,
    229,
    227,
    158,
    205,
    104,
    62,
    54,
    235,
    91,
    13,
    252,
    236,
    14,
    149,
    195,
    253,
    214,
    116,
    236,
    255,
    26,
    206,
    115,
    73,
    219,
    124,
    223,
    209,
    99,
    232,
    86,
    48,
    83,
    106,
    200,
    242,
    63,
    244,
    101,
    196,
    35,
    105,
    57,
    90,
    151,
    253,
    213,
    123,
    220,
    91,
    166,
    176,
    203,
    255,
    126,
    143,
    0,
    118,
    153,
    9,
    196,
    74,
    86,
    55,
    73,
    217,
    233,
    153,
    7,
    46,
    9,
    83,
    59,
    47,
    111,
    175,
    230,
    201,
    34,
    44,
    227,
    125,
    191,
    70,
    63,
    223,
    16,
    183,
    186,
    40,
    232,
    121,
    96,
    108,
    203,
    118,
    106,
    233,
    78,
    231,
    167,
    134,
    209,
    112,
    95,
    73,
    53,
    234,
    86,
    252,
    36,
    178,
    173,
    28,
    71,
    119,
    148,
    17,
    50,
    156,
    238,
    155,
    137,
    230,
    195,
    41
  ]);
  @override
  String get supabaseUrl => _get('SUPABASE_URL');

  @override
  String get supabaseKey => _get('SUPABASE_KEY');

  T _get<T>(
    String key, {
    T Function(String)? fromString,
  }) {
    T _parseValue(String strValue) {
      if (T == String) {
        return (strValue) as T;
      } else if (T == int) {
        return int.parse(strValue) as T;
      } else if (T == double) {
        return double.parse(strValue) as T;
      } else if (T == bool) {
        return (strValue.toLowerCase() == 'true') as T;
      } else if (T == Enum || fromString != null) {
        if (fromString == null) {
          throw Exception('fromString is required for Enum');
        }

        return fromString(strValue.split('.').last);
      }

      throw Exception('Type ${T.toString()} not supported');
    }

    final encryptionKey = base64.decode(_encryptionKey.trim());
    final iv = base64.decode(_iv.trim());
    final decrypted =
        AESCBCEncryper.aesCbcDecrypt(encryptionKey, iv, _encryptedValues);
    final jsonMap = json.decode(decrypted) as Map<String, dynamic>;
    if (!jsonMap.containsKey(key)) {
      throw Exception('Key $key not found in .env file');
    }

    final encryptedValue = jsonMap[key] as String;
    final decryptedValue = AESCBCEncryper.aesCbcDecrypt(
      encryptionKey,
      iv,
      base64.decode(encryptedValue),
    );
    return _parseValue(decryptedValue);
  }
}
