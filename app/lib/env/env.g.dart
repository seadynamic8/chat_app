// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'env.dart';

// **************************************************************************
// SecureDotEnvAnnotationGenerator
// **************************************************************************

class _$Env extends Env {
  const _$Env(this._encryptionKey, this._iv) : super._();

  final String _encryptionKey;
  final String _iv;
  static final Uint8List _encryptedValues = Uint8List.fromList([
    167,
    117,
    174,
    247,
    238,
    253,
    10,
    155,
    134,
    208,
    72,
    8,
    220,
    217,
    170,
    116,
    139,
    240,
    226,
    230,
    249,
    91,
    158,
    77,
    155,
    225,
    248,
    79,
    171,
    119,
    56,
    111,
    237,
    39,
    68,
    245,
    198,
    65,
    5,
    31,
    15,
    213,
    23,
    155,
    117,
    119,
    113,
    115,
    86,
    37,
    226,
    210,
    3,
    74,
    251,
    224,
    24,
    63,
    130,
    173,
    71,
    120,
    105,
    12,
    181,
    8,
    55,
    82,
    26,
    253,
    239,
    98,
    196,
    207,
    213,
    224,
    230,
    143,
    211,
    40,
    136,
    93,
    47,
    255,
    33,
    255,
    69,
    72,
    237,
    207,
    230,
    171,
    232,
    26,
    78,
    237,
    90,
    26,
    96,
    41,
    80,
    226,
    160,
    28,
    190,
    142,
    24,
    158,
    26,
    242,
    105,
    235,
    226,
    117,
    23,
    124,
    59,
    73,
    32,
    51,
    90,
    209,
    207,
    117,
    60,
    146,
    243,
    93,
    222,
    197,
    35,
    251,
    20,
    65,
    221,
    87,
    120,
    108,
    66,
    231,
    183,
    244,
    254,
    153,
    67,
    166,
    189,
    133,
    43,
    158,
    186,
    58,
    148,
    244,
    190,
    94,
    11,
    19,
    169,
    231,
    215,
    128,
    105,
    94,
    124,
    50,
    246,
    54,
    180,
    161,
    229,
    187,
    159,
    238,
    72,
    186,
    73,
    29,
    239,
    225,
    163,
    10,
    206,
    47,
    66,
    207,
    138,
    112,
    136,
    5,
    244,
    90,
    44,
    182,
    23,
    142,
    217,
    95,
    237,
    133,
    142,
    37,
    238,
    92,
    207,
    40,
    236,
    134,
    40,
    248,
    39,
    168,
    31,
    207,
    231,
    81,
    175,
    3,
    37,
    143,
    87,
    218,
    179,
    28,
    227,
    42,
    215,
    169,
    104,
    241,
    202,
    245,
    63,
    26,
    179,
    144,
    84,
    201,
    72,
    169,
    11,
    193,
    105,
    135,
    132,
    199,
    105,
    172,
    131,
    6,
    177,
    173,
    141,
    252,
    83,
    165,
    97,
    232,
    116,
    204,
    55,
    100,
    134,
    64,
    123,
    254,
    72,
    102,
    45,
    212,
    68,
    214,
    81,
    167,
    167,
    240,
    166,
    24,
    189,
    161,
    242,
    49,
    212,
    113,
    41,
    79,
    229,
    199,
    201,
    196,
    226,
    127,
    128,
    53,
    57,
    184,
    143,
    132,
    76,
    195,
    12,
    137,
    48,
    254
  ]);
  @override
  String get supabaseUrl => _get('SUPABASE_URL');

  @override
  String get supabaseKey => _get('SUPABASE_KEY');

  T _get<T>(
    String key, {
    T Function(String)? fromString,
  }) {
    T _parseValue(String strValue) {
      if (T == String) {
        return (strValue) as T;
      } else if (T == int) {
        return int.parse(strValue) as T;
      } else if (T == double) {
        return double.parse(strValue) as T;
      } else if (T == bool) {
        return (strValue.toLowerCase() == 'true') as T;
      } else if (T == Enum || fromString != null) {
        if (fromString == null) {
          throw Exception('fromString is required for Enum');
        }

        return fromString(strValue.split('.').last);
      }

      throw Exception('Type ${T.toString()} not supported');
    }

    final encryptionKey = base64.decode(_encryptionKey.trim());
    final iv = base64.decode(_iv.trim());
    final decrypted =
        AESCBCEncryper.aesCbcDecrypt(encryptionKey, iv, _encryptedValues);
    final jsonMap = json.decode(decrypted) as Map<String, dynamic>;
    if (!jsonMap.containsKey(key)) {
      throw Exception('Key $key not found in .env file');
    }

    final encryptedValue = jsonMap[key] as String;
    final decryptedValue = AESCBCEncryper.aesCbcDecrypt(
      encryptionKey,
      iv,
      base64.decode(encryptedValue),
    );
    return _parseValue(decryptedValue);
  }
}
