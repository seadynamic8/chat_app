// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'env.dart';

// **************************************************************************
// SecureDotEnvAnnotationGenerator
// **************************************************************************

class _$Env extends Env {
  const _$Env(this._encryptionKey, this._iv) : super._();

  final String _encryptionKey;
  final String _iv;
  static final Uint8List _encryptedValues = Uint8List.fromList([
    33,
    106,
    142,
    135,
    104,
    20,
    223,
    237,
    206,
    189,
    95,
    10,
    57,
    69,
    65,
    202,
    26,
    155,
    92,
    197,
    160,
    77,
    235,
    241,
    18,
    214,
    204,
    79,
    25,
    205,
    189,
    202,
    195,
    50,
    208,
    196,
    183,
    66,
    66,
    209,
    142,
    89,
    64,
    92,
    88,
    82,
    146,
    97,
    169,
    142,
    153,
    134,
    191,
    143,
    24,
    74,
    118,
    111,
    18,
    87,
    20,
    109,
    150,
    191,
    60,
    14,
    69,
    195,
    148,
    86,
    233,
    3,
    127,
    173,
    125,
    61,
    232,
    141,
    252,
    12,
    68,
    34,
    87,
    230,
    53,
    1,
    246,
    79,
    59,
    18,
    159,
    162,
    7,
    236,
    199,
    122,
    45,
    79,
    43,
    113,
    168,
    156,
    54,
    217,
    182,
    200,
    161,
    64,
    164,
    43,
    5,
    37,
    241,
    21,
    1,
    13,
    32,
    78,
    11,
    129,
    255,
    203,
    169,
    89,
    194,
    43,
    220,
    141,
    75,
    92,
    189,
    207,
    207,
    203,
    110,
    206,
    102,
    209,
    24,
    250,
    228,
    194,
    14,
    189,
    106,
    45,
    1,
    189,
    26,
    39,
    73,
    20,
    209,
    42,
    216,
    134,
    59,
    215,
    182,
    220,
    25,
    89,
    16,
    177,
    110,
    49,
    35,
    124,
    222,
    219,
    36,
    143,
    139,
    105,
    132,
    253,
    208,
    87,
    155,
    254,
    100,
    125,
    70,
    246,
    99,
    76,
    56,
    193,
    62,
    170,
    216,
    7,
    41,
    91,
    251,
    144,
    200,
    78,
    14,
    196,
    107,
    4,
    204,
    193,
    145,
    6,
    8,
    221,
    106,
    199,
    50,
    253,
    67,
    37,
    49,
    85,
    162,
    252,
    142,
    252,
    199,
    254,
    4,
    246,
    105,
    72,
    59,
    118,
    208,
    118,
    80,
    195,
    204,
    105,
    18,
    238,
    109,
    189,
    208,
    172,
    159,
    142,
    86,
    200,
    29,
    111,
    49,
    240,
    137,
    62,
    32,
    20,
    129,
    237,
    48,
    53,
    41,
    150,
    183,
    176,
    153,
    26,
    129,
    123,
    107,
    65,
    236,
    213,
    142,
    198,
    42,
    171,
    104,
    203,
    197,
    213,
    231,
    150,
    212,
    147,
    125,
    5,
    59,
    192,
    173,
    46,
    65,
    118,
    24,
    232,
    13,
    196,
    200,
    20,
    71,
    201,
    252,
    13,
    163,
    192,
    19,
    45,
    115,
    210,
    106,
    172,
    128,
    242,
    0,
    9,
    89,
    210,
    84,
    156,
    112,
    29,
    172,
    70,
    186,
    240,
    224,
    109,
    33,
    133,
    117,
    222,
    109,
    125,
    56,
    26,
    175,
    194,
    208,
    159,
    178,
    90,
    142,
    158,
    165,
    88,
    222,
    192,
    219,
    32,
    189,
    62,
    219,
    186,
    243,
    111,
    98,
    52,
    8,
    40,
    251,
    90,
    133,
    229,
    65,
    161,
    238,
    120,
    127,
    103,
    232,
    68,
    96,
    119,
    41,
    250,
    191,
    70,
    18,
    196,
    22,
    200,
    156,
    3,
    102,
    235,
    180,
    111,
    73,
    204,
    136,
    223,
    47,
    189,
    220,
    220,
    216,
    62,
    61,
    174,
    185,
    18,
    119,
    36,
    46,
    198,
    108,
    165,
    240,
    187,
    114,
    162,
    73,
    244,
    193,
    91,
    202,
    246,
    157,
    239,
    248,
    79,
    36,
    160,
    158,
    166,
    142,
    112,
    175,
    129,
    86,
    98,
    117,
    33,
    184,
    222,
    148,
    69
  ]);
  @override
  String get supabaseUrl => _get('SUPABASE_URL');

  @override
  String get supabaseKey => _get('SUPABASE_KEY');

  @override
  String get azureKey => _get('AZURE_KEY');

  @override
  String get azureRegion => _get('AZURE_REGION');

  T _get<T>(
    String key, {
    T Function(String)? fromString,
  }) {
    T _parseValue(String strValue) {
      if (T == String) {
        return (strValue) as T;
      } else if (T == int) {
        return int.parse(strValue) as T;
      } else if (T == double) {
        return double.parse(strValue) as T;
      } else if (T == bool) {
        return (strValue.toLowerCase() == 'true') as T;
      } else if (T == Enum || fromString != null) {
        if (fromString == null) {
          throw Exception('fromString is required for Enum');
        }

        return fromString(strValue.split('.').last);
      }

      throw Exception('Type ${T.toString()} not supported');
    }

    final encryptionKey = base64.decode(_encryptionKey.trim());
    final iv = base64.decode(_iv.trim());
    final decrypted =
        AESCBCEncryper.aesCbcDecrypt(encryptionKey, iv, _encryptedValues);
    final jsonMap = json.decode(decrypted) as Map<String, dynamic>;
    if (!jsonMap.containsKey(key)) {
      throw Exception('Key $key not found in .env file');
    }

    final encryptedValue = jsonMap[key] as String;
    final decryptedValue = AESCBCEncryper.aesCbcDecrypt(
      encryptionKey,
      iv,
      base64.decode(encryptedValue),
    );
    return _parseValue(decryptedValue);
  }
}
