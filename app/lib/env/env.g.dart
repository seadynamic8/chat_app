// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'env.dart';

// **************************************************************************
// SecureDotEnvAnnotationGenerator
// **************************************************************************

class _$Env extends Env {
  const _$Env(this._encryptionKey, this._iv) : super._();

  final String _encryptionKey;
  final String _iv;
  static final Uint8List _encryptedValues = Uint8List.fromList([
    129,
    147,
    224,
    0,
    102,
    39,
    214,
    208,
    106,
    75,
    147,
    162,
    187,
    171,
    251,
    11,
    142,
    86,
    190,
    64,
    123,
    202,
    187,
    249,
    209,
    71,
    148,
    120,
    194,
    60,
    65,
    63,
    232,
    49,
    45,
    31,
    25,
    33,
    181,
    125,
    179,
    165,
    135,
    251,
    251,
    74,
    40,
    4,
    101,
    80,
    47,
    83,
    104,
    159,
    46,
    144,
    20,
    17,
    246,
    138,
    10,
    133,
    126,
    77,
    111,
    117,
    106,
    129,
    181,
    193,
    96,
    231,
    166,
    18,
    176,
    40,
    179,
    51,
    75,
    249,
    120,
    88,
    137,
    152,
    94,
    132,
    117,
    155,
    212,
    77,
    118,
    44,
    201,
    0,
    115,
    76,
    84,
    27,
    8,
    98,
    234,
    195,
    165,
    94,
    131,
    185,
    190,
    185,
    247,
    48,
    236,
    31,
    158,
    97,
    95,
    39,
    115,
    23,
    74,
    82,
    164,
    84,
    88,
    106,
    79,
    180,
    141,
    39,
    29,
    114,
    59,
    174,
    250,
    58,
    79,
    170,
    247,
    145,
    28,
    103,
    54,
    158,
    195,
    61,
    240,
    118,
    25,
    94,
    3,
    255,
    64,
    9,
    241,
    95,
    129,
    253,
    52,
    196,
    63,
    228,
    18,
    218,
    84,
    167,
    130,
    153,
    245,
    167,
    92,
    106,
    251,
    176,
    12,
    250,
    247,
    222,
    151,
    63,
    221,
    239,
    6,
    163,
    108,
    20,
    47,
    97,
    189,
    212,
    68,
    106,
    80,
    43,
    203,
    125,
    143,
    59,
    247,
    27,
    71,
    67,
    148,
    88,
    75,
    219,
    173,
    171,
    95,
    40,
    49,
    114,
    28,
    234,
    243,
    6,
    184,
    193,
    99,
    69,
    169,
    1,
    240,
    60,
    219,
    250,
    210,
    157,
    108,
    4,
    112,
    117,
    69,
    110,
    174,
    35,
    145,
    145,
    234,
    171,
    175,
    132,
    15,
    95,
    131,
    152,
    255,
    169,
    180,
    133,
    239,
    26,
    245,
    36,
    111,
    140,
    58,
    234,
    5,
    47,
    160,
    228,
    2,
    177,
    112,
    94,
    50,
    99,
    247,
    164,
    208,
    141,
    129,
    192,
    187,
    33,
    161,
    88,
    150,
    74,
    218,
    214,
    235,
    214,
    166,
    115,
    108,
    191,
    184,
    155,
    30,
    221,
    123,
    157,
    148,
    71,
    208,
    143,
    105,
    130,
    88,
    212,
    212,
    234,
    114,
    20,
    65,
    247,
    12,
    31,
    15,
    8,
    90,
    209,
    234,
    93,
    157,
    44,
    25,
    19,
    43,
    191,
    192,
    204,
    115,
    55,
    21,
    33,
    146,
    251,
    4,
    134,
    102,
    232,
    201,
    14,
    171,
    151,
    164,
    9,
    69,
    214,
    63,
    62,
    190,
    39,
    141,
    109,
    211,
    191,
    234,
    39,
    230,
    193,
    93,
    28,
    195,
    145,
    5,
    102,
    98,
    191,
    2,
    16,
    54,
    132,
    169,
    157,
    84,
    46,
    24,
    248,
    64,
    246,
    138,
    156,
    43,
    144,
    210,
    250,
    233,
    43,
    252,
    97,
    239,
    171,
    203,
    129,
    204,
    5,
    41,
    247,
    170,
    233,
    147,
    73,
    72,
    109,
    63,
    149,
    109,
    28,
    174,
    179,
    230,
    226,
    39,
    191,
    241,
    119,
    13,
    7,
    89,
    188,
    26,
    142,
    38,
    12,
    200,
    162,
    134,
    105,
    155,
    225,
    47,
    101,
    22,
    170,
    246,
    87,
    186,
    172,
    201,
    228
  ]);
  @override
  String get supabaseUrl => _get('SUPABASE_URL');

  @override
  String get supabaseKey => _get('SUPABASE_KEY');

  @override
  String get azureKey => _get('AZURE_KEY');

  @override
  String get azureRegion => _get('AZURE_REGION');

  T _get<T>(
    String key, {
    T Function(String)? fromString,
  }) {
    T _parseValue(String strValue) {
      if (T == String) {
        return (strValue) as T;
      } else if (T == int) {
        return int.parse(strValue) as T;
      } else if (T == double) {
        return double.parse(strValue) as T;
      } else if (T == bool) {
        return (strValue.toLowerCase() == 'true') as T;
      } else if (T == Enum || fromString != null) {
        if (fromString == null) {
          throw Exception('fromString is required for Enum');
        }

        return fromString(strValue.split('.').last);
      }

      throw Exception('Type ${T.toString()} not supported');
    }

    final encryptionKey = base64.decode(_encryptionKey.trim());
    final iv = base64.decode(_iv.trim());
    final decrypted =
        AESCBCEncryper.aesCbcDecrypt(encryptionKey, iv, _encryptedValues);
    final jsonMap = json.decode(decrypted) as Map<String, dynamic>;
    if (!jsonMap.containsKey(key)) {
      throw Exception('Key $key not found in .env file');
    }

    final encryptedValue = jsonMap[key] as String;
    final decryptedValue = AESCBCEncryper.aesCbcDecrypt(
      encryptionKey,
      iv,
      base64.decode(encryptedValue),
    );
    return _parseValue(decryptedValue);
  }
}
