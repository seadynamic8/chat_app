// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'env.dart';

// **************************************************************************
// SecureDotEnvAnnotationGenerator
// **************************************************************************

class _$Env extends Env {
  const _$Env(this._encryptionKey, this._iv) : super._();

  final String _encryptionKey;
  final String _iv;
  static final Uint8List _encryptedValues = Uint8List.fromList([
    131,
    29,
    145,
    6,
    158,
    176,
    178,
    101,
    233,
    89,
    38,
    84,
    220,
    221,
    0,
    159,
    109,
    88,
    209,
    183,
    122,
    191,
    32,
    92,
    63,
    168,
    170,
    1,
    141,
    5,
    219,
    65,
    30,
    31,
    182,
    6,
    67,
    76,
    181,
    189,
    226,
    248,
    150,
    49,
    106,
    45,
    76,
    11,
    90,
    30,
    182,
    25,
    240,
    183,
    171,
    198,
    84,
    236,
    129,
    163,
    250,
    102,
    34,
    71,
    247,
    210,
    147,
    162,
    234,
    67,
    235,
    77,
    244,
    103,
    212,
    94,
    59,
    145,
    24,
    123,
    159,
    38,
    95,
    84,
    84,
    208,
    25,
    86,
    152,
    161,
    55,
    54,
    43,
    72,
    61,
    124,
    175,
    34,
    247,
    139,
    66,
    8,
    23,
    99,
    171,
    206,
    239,
    202,
    129,
    241,
    98,
    56,
    34,
    252,
    11,
    111,
    140,
    125,
    174,
    157,
    166,
    55,
    73,
    125,
    238,
    45,
    111,
    205,
    162,
    76,
    235,
    138,
    215,
    237,
    156,
    20,
    209,
    226,
    201,
    71,
    12,
    157,
    199,
    163,
    152,
    12,
    18,
    180,
    111,
    249,
    75,
    26,
    41,
    41,
    220,
    154,
    92,
    189,
    195,
    23,
    28,
    192,
    190,
    26,
    121,
    156,
    57,
    160,
    211,
    79,
    208,
    134,
    217,
    182,
    242,
    105,
    154,
    148,
    166,
    181,
    134,
    66,
    140,
    19,
    134,
    12,
    36,
    26,
    14,
    36,
    142,
    174,
    58,
    210,
    226,
    188,
    1,
    156,
    187,
    217,
    150,
    24,
    1,
    195,
    163,
    199,
    231,
    20,
    215,
    88,
    117,
    86,
    28,
    222,
    220,
    62,
    119,
    200,
    196,
    22,
    160,
    17,
    101,
    52,
    233,
    139,
    188,
    164,
    25,
    237,
    253,
    219,
    17,
    61,
    199,
    202,
    71,
    248,
    4,
    88,
    105,
    1,
    15,
    125,
    89,
    67,
    168,
    49,
    157,
    6,
    222,
    89,
    161,
    12,
    158,
    64,
    213,
    211,
    134,
    183,
    104,
    162,
    142,
    188,
    12,
    5,
    114,
    110,
    77,
    185,
    156,
    90,
    76,
    167,
    94,
    95,
    17,
    15,
    6,
    112,
    16,
    10,
    114,
    200,
    232,
    143,
    216,
    56,
    75,
    236,
    123,
    255,
    95,
    23,
    189,
    17,
    2,
    230,
    225,
    6,
    5,
    11,
    167,
    20,
    152,
    151,
    33,
    243,
    250,
    25,
    251,
    228,
    57,
    219,
    167,
    36,
    83,
    255,
    182,
    108,
    5,
    17,
    245,
    42,
    163,
    229,
    98,
    85,
    26,
    78,
    82,
    80,
    226,
    153,
    188,
    165,
    213,
    11,
    13,
    93,
    135,
    213,
    159,
    182,
    181,
    36,
    235,
    122,
    216,
    108,
    112,
    187,
    254,
    223,
    167,
    139,
    63,
    78,
    103,
    251,
    255,
    254,
    64,
    125,
    26,
    95,
    248,
    115,
    209,
    227,
    232,
    130,
    220,
    19,
    2,
    185,
    88,
    162,
    224,
    225,
    247,
    213,
    246,
    183,
    37,
    145,
    198,
    14,
    187,
    244,
    178,
    80,
    90,
    214,
    208,
    126,
    142,
    45,
    99,
    199,
    217,
    24,
    23,
    152,
    166,
    84,
    255,
    140,
    205,
    236,
    177,
    83,
    171,
    208,
    85,
    227,
    142,
    197,
    232,
    177,
    204,
    138,
    35,
    95,
    182,
    68,
    111,
    220,
    99,
    225,
    83,
    33,
    239,
    185,
    16,
    231,
    230,
    36,
    58,
    195,
    169,
    61,
    95,
    12,
    219,
    40,
    76,
    49,
    86,
    237,
    239,
    98,
    96,
    43,
    61,
    133,
    182,
    35,
    118,
    32,
    100,
    245,
    190,
    120,
    191,
    97,
    18,
    176,
    176,
    42,
    157,
    63,
    123,
    74,
    54,
    51,
    77,
    40,
    218,
    156,
    112,
    129,
    116,
    131,
    232,
    98,
    234,
    210,
    195,
    222,
    208,
    35,
    227,
    68,
    204,
    213,
    239,
    123,
    105,
    92,
    211,
    211,
    75,
    38,
    72,
    127,
    163,
    114,
    172,
    72,
    76,
    2,
    218,
    139,
    197,
    129,
    66,
    102,
    148,
    93,
    193,
    24,
    113,
    141,
    185,
    135,
    33,
    209,
    214,
    255,
    204,
    159,
    236,
    69,
    20,
    50,
    247,
    97,
    238,
    172,
    245,
    222,
    107,
    112,
    171,
    89,
    242,
    181,
    255,
    188,
    231,
    124,
    230,
    67,
    135,
    191,
    86,
    125,
    167,
    242,
    69,
    150,
    232,
    108,
    148,
    9,
    115,
    179,
    10,
    19,
    47,
    199,
    226,
    121,
    39,
    8,
    42,
    193,
    244,
    142,
    74,
    199,
    208,
    148,
    162,
    242,
    101,
    240,
    110,
    239,
    222,
    133,
    128,
    238,
    44,
    79,
    3,
    147,
    6,
    87,
    155,
    42,
    189,
    170,
    156,
    47,
    63,
    183,
    226,
    224,
    93,
    55,
    12,
    68,
    106,
    196,
    110,
    51,
    169,
    245,
    251,
    15,
    20,
    107,
    85,
    127,
    228,
    170,
    204,
    215,
    75,
    204,
    137,
    52,
    240,
    110,
    134,
    191,
    140,
    99,
    56,
    207,
    211,
    6,
    77,
    254,
    50,
    227,
    26,
    204,
    3,
    134,
    199,
    233,
    80,
    144,
    177,
    104,
    163,
    175,
    19,
    71,
    248,
    133,
    59,
    167,
    162,
    214,
    63,
    199,
    163,
    15,
    138,
    176,
    5,
    97,
    55,
    216,
    124,
    140,
    9,
    23,
    56,
    10,
    41,
    153,
    45,
    118,
    111,
    226,
    42,
    102,
    164,
    161,
    94,
    55,
    66,
    3,
    235,
    228,
    132,
    97,
    100,
    254,
    72,
    230,
    12,
    250,
    31,
    97,
    84,
    188,
    228,
    57,
    158,
    165,
    252,
    251,
    127,
    97,
    11,
    190,
    27,
    111,
    223,
    52,
    178,
    70,
    79,
    250,
    100,
    11,
    252,
    114,
    8,
    190,
    91,
    174,
    177,
    243,
    42,
    89,
    218,
    167,
    34,
    124,
    1,
    170,
    249,
    116,
    131,
    253,
    28,
    228,
    176,
    114,
    20,
    102,
    11,
    186,
    47,
    255,
    77,
    71,
    97,
    247,
    245,
    124
  ]);
  @override
  String get supabaseUrl => _get('SUPABASE_URL');

  @override
  String get supabaseKey => _get('SUPABASE_KEY');

  @override
  String get azureKey => _get('AZURE_KEY');

  @override
  String get azureRegion => _get('AZURE_REGION');

  @override
  String get videoSdkTokenTemp => _get('VIDEO_SDK_TOKEN_TEMP');

  T _get<T>(
    String key, {
    T Function(String)? fromString,
  }) {
    T _parseValue(String strValue) {
      if (T == String) {
        return (strValue) as T;
      } else if (T == int) {
        return int.parse(strValue) as T;
      } else if (T == double) {
        return double.parse(strValue) as T;
      } else if (T == bool) {
        return (strValue.toLowerCase() == 'true') as T;
      } else if (T == Enum || fromString != null) {
        if (fromString == null) {
          throw Exception('fromString is required for Enum');
        }

        return fromString(strValue.split('.').last);
      }

      throw Exception('Type ${T.toString()} not supported');
    }

    final encryptionKey = base64.decode(_encryptionKey.trim());
    final iv = base64.decode(_iv.trim());
    final decrypted =
        AESCBCEncryper.aesCbcDecrypt(encryptionKey, iv, _encryptedValues);
    final jsonMap = json.decode(decrypted) as Map<String, dynamic>;
    if (!jsonMap.containsKey(key)) {
      throw Exception('Key $key not found in .env file');
    }

    final encryptedValue = jsonMap[key] as String;
    final decryptedValue = AESCBCEncryper.aesCbcDecrypt(
      encryptionKey,
      iv,
      base64.decode(encryptedValue),
    );
    return _parseValue(decryptedValue);
  }
}
